<?xml version="1.0" encoding="UTF-8"?>
<blocks>

    <dropdown id="keyValue">
        <choices>
            <c text="@keys" code="keys" />
            <c text="@values" code="values" />
        </choices>
    </dropdown>

    <dropdown id="lnExp">
        <choices>
            <c text="@ln" code="log" />
            <c text="@econst" code="exp" />
        </choices>
    </dropdown>

    <dropdown id="pressedReleasedMovedDragged">
        <choices>
            <c text="@pressed" code="Pressed" />
            <c text="@released" code="Released" />
            <c text="@moved" code="Moved" />
            <c text="@dragged" code="Dragged" />
        </choices>
    </dropdown>

    <dropdown id="round">
        <choices>
            <c text="@num.roundtext" code="round" />
            <c text="@num.floortext" code="floor" />
            <c text="@num.ceiltext" code="ceil" />
        </choices>
    </dropdown>

    <dropdown id="allPlatforms">
        <choices>
            <c text="@plaf.flash" code="flash" />
            <c text="@plaf.html5" code="html5" />
            <c text="@plaf.desktop" code="desktop" />
            <c text="@plaf.ios" code="ios" />
            <c text="@plaf.android" code="android" />
            <c text="@plaf.web" code="(flash || html5)" />
            <c text="@plaf.mobile" code="mobile" />
            <c text="@plaf.win" code="windows" />
            <c text="@plaf.mac" code="mac" />
            <c text="@plaf.lin" code="linux" />
        </choices>
    </dropdown>

    <dropdown id="easing">
        <choices>
            <c text="@easing.none" code="Easing.linear" />
            <c text="@easing.backin" code="Easing.backIn" />
            <c text="@easing.backinout" code="Easing.backInOut" />
            <c text="@easing.backout" code="Easing.backOut" />
            <c text="@easing.elasticin" code="Easing.elasticIn" />
            <c text="@easing.elasticinout" code="Easing.elasticInOut" />
            <c text="@easing.elasticout" code="Easing.elasticOut" />
            <c text="@easing.regularin" code="Easing.quadIn" />
            <c text="@easing.regularinout" code="Easing.quadInOut" />
            <c text="@easing.regularout" code="Easing.quadOut" />
            <c text="@easing.strongin" code="Easing.expoIn" />
            <c text="@easing.stronginout" code="Easing.expoInOut" />
            <c text="@easing.strongout" code="Easing.expoOut" />
        </choices>
    </dropdown>

    <dropdown id="filters">
        <choices>
            <c text="@grayscale" code="Grayscale" />
            <c text="@invert" code="Invert" />
            <c text="@sepia" code="Sepia" />
        </choices>
    </dropdown>

    <dropdown id="pauseUnpause">
        <choices>
            <c text="@pause" code="pause" />
            <c text="@unpause" code="unpause" />
        </choices>
    </dropdown>

    <dropdown id="trig">
        <choices>
            <c text="@num.sintext" code="sin" />
            <c text="@num.costext" code="cos" />
            <c text="@num.tantext" code="tan" />
            <c text="@num.asintext" code="asin" />
            <c text="@num.acostext" code="acos" />
            <c text="@num.atantext" code="atan" />
        </choices>
    </dropdown>

    <dropdown id="scaleMethod">
        <choices>
            <c text="@smoothing" code="true" />
            <c text="@nosmoothing" code="false" />
        </choices>
    </dropdown>

    <dropdown id="actorCreateKill">
        <choices>
            <c text="@created" code="Created" />
            <c text="@killed" code="Killed" />
        </choices>
    </dropdown>

    <dropdown id="enableDisable">
        <choices>
            <c text="@block.enable" code="enable" />
            <c text="@block.disable" code="disable" />
        </choices>
    </dropdown>

    <dropdown id="sensorSolid">
        <choices>
            <c text="@sactor.shape.sensor" code="true" />
            <c text="@sactor.shape.solid" code="false" />
        </choices>
    </dropdown>

    <dropdown id="beforeAfter">
        <choices>
            <c text="@before" code="-1" />
            <c text="@after" code="1" />
        </choices>
    </dropdown>

    <dropdown id="pushShove">
        <choices>
            <c text="@push" code="push" />
            <c text="@shove" code="applyImpulse" />
        </choices>
    </dropdown>

    <dropdown id="playLoop">
        <choices>
            <c text="@play" code="play" />
            <c text="@loop" code="loop" />
        </choices>
    </dropdown>

    <dropdown id="iPhoneiPad">
        <choices>
            <c text="@iPhone" code="iPhone" />
            <c text="@iPad" code="iPad" />
        </choices>
    </dropdown>

    <dropdown id="downPressRelease">
        <choices>
            <c text="@in.down.yes" code="Down" />
            <c text="@in.press.yes" code="Pressed" />
            <c text="@in.release.yes" code="Released" />
        </choices>
    </dropdown>

    <dropdown id="showHide">
        <choices>
            <c text="@block.hide" code="hide" />
            <c text="@block.show" code="show" />
        </choices>
    </dropdown>

    <dropdown id="csb">
        <choices>
            <c text="@contrast" code="contrast" />
            <c text="@saturation" code="saturation" />
            <c text="@brightness" code="brightness" />
        </choices>
    </dropdown>

    <dropdown id="imageProps2">
        <choices>
            <c text="@width" code="scaleX" />
            <c text="@height" code="scaleY" />
            <c text="@alpha" code="alpha" />
        </choices>
    </dropdown>

    <dropdown id="anyPressedReleased">
        <choices>
            <c text="@pressed" code="Pressed" />
            <c text="@released" code="Released" />
        </choices>
    </dropdown>

    <dropdown id="sceneScreen">
        <choices>
            <c text="@scene" code="Scene" />
            <c text="@screen" code="Screen" />
        </choices>
    </dropdown>

    <dropdown id="enableDisableTF">
        <choices>
            <c text="@block.enable" code="true" />
            <c text="@block.disable" code="false" />
        </choices>
    </dropdown>

    <dropdown id="inOut">
        <choices>
            <c text="@in" code="1" />
            <c text="@out" code="0" />
        </choices>
    </dropdown>

    <dropdown id="xyz">
        <choices>
            <c text="@x" code="X" />
            <c text="@y" code="Y" />
            <c text="@z" code="Z" />
        </choices>
    </dropdown>

    <dropdown id="scaleMode">
        <choices>
            <c text="@mobile.settings.basic.scale.none" code="ScaleMode.NO_SCALING" />
            <c text="@mobile.settings.basic.scale.full" code="ScaleMode.FULLSCREEN" />
            <c text="@mobile.settings.basic.scale.stretch" code="ScaleMode.STRETCH_TO_FIT" />
            <c text="@mobile.settings.basic.scale.scale1" code="ScaleMode.SCALE_TO_FIT_LETTERBOX" />
            <c text="@mobile.settings.basic.scale.scale2" code="ScaleMode.SCALE_TO_FIT_FILL" />
            <c text="@mobile.settings.basic.scale.scale3" code="ScaleMode.SCALE_TO_FIT_FULLSCREEN" />
        </choices>
    </dropdown>

    <dropdown id="fadeTransitions">
        <choices>
            <c text="@transition.fadeout" code="createFadeOut" />
            <c text="@transition.fadein" code="createFadeIn" />
        </choices>
    </dropdown>

    <dropdown id="inputOver">
        <choices>
            <c text="@in.over.yes" code="" />
            <c text="@in.over.no" code="!" />
        </choices>
    </dropdown>

    <dropdown id="imageProps0">
        <choices>
            <c text="@x" code="setX" />
            <c text="@y" code="setY" />
        </choices>
    </dropdown>

    <dropdown id="multitouch">
        <choices>
            <c text="@started" code="Started" />
            <c text="@dragged" code="Dragged" />
            <c text="@released" code="Ended" />
        </choices>
    </dropdown>

    <dropdown id="deviceStates">
        <choices>
            <c text="@touched" code="Pressed" />
            <c text="@dragged" code="Dragged" />
            <c text="@released" code="Released" />
        </choices>
    </dropdown>

    <dropdown id="allDevices2">
        <choices>
            <c text="@ios.standard" code="Engine.isStandardIOS" />
            <c text="@ios.extended" code="Engine.isExtendedIOS" />
            <c text="@ios.iphone6" code="Engine.isIPhone6" />
            <c text="@ios.iphone6p" code="Engine.isIPhone6Plus" />
            <c text="@ios.tablet" code="Engine.isTabletIOS" />
            <c text="@ios.iphonex" code="Engine.isIPhoneX" />
            <c text="@ios.iphonexmax" code="Engine.isIPhoneXMax" />
            <c text="@ios.iphonexr" code="Engine.isIPhoneXR" />
        </choices>
    </dropdown>

    <dropdown id="shiftCtrl">
        <choices>
            <c text="@in.shift" code="Shift" />
            <c text="@in.ctrl" code="Ctrl" />
        </choices>
    </dropdown>

    <dropdown id="inKeyValue">
        <choices>
            <c text="@key" code=".keys()" />
            <c text="@value" code="" />
        </choices>
    </dropdown>

    <dropdown id="focusState">
        <choices>
            <c text="@loses" code="" />
            <c text="@gains" code="!" />
        </choices>
    </dropdown>

    <dropdown id="setZ">
        <choices>
            <c text="@back1" code="bringImageBack" />
            <c text="@forward1" code="bringImageForward" />
            <c text="@toback" code="bringImageToBack" />
            <c text="@tofront" code="bringImageToFront" />
        </choices>
    </dropdown>

    <dropdown id="collisionHitActive">
        <choices>
            <c text="@collision.hit.yes.active" code="" />
            <c text="@collision.hit.no.active" code="!" />
        </choices>
    </dropdown>

    <dropdown id="backForward">
        <choices>
            <c text="@back1" code="sendBackward" />
            <c text="@forward1" code="bringForward" />
            <c text="@toback" code="sendToBack" />
            <c text="@tofront" code="bringToFront" />
        </choices>
    </dropdown>

    <dropdown id="layersFrontBack">
        <choices>
            <c text="@layer.front" code="1" />
            <c text="@layer.back" code="2" />
        </choices>
    </dropdown>

    <dropdown id="loadUnload">
        <choices>
            <c text="@load" code="load" />
            <c text="@unload" code="unload" />
        </choices>
    </dropdown>

    <dropdown id="imageProps1">
        <choices>
            <c text="@direction" code="rotation" />
        </choices>
    </dropdown>

    <dropdown id="widthHeight">
        <choices>
            <c text="@width" code="Width" />
            <c text="@height" code="Height" />
        </choices>
    </dropdown>

    <dropdown id="blend">
        <choices>
            <c text="@blend.add" code="BlendMode.ADD" />
            <c text="@blend.alpha" code="BlendMode.ALPHA" />
            <c text="@blend.darken" code="BlendMode.DARKEN" />
            <c text="@blend.difference" code="BlendMode.DIFFERENCE" />
            <c text="@blend.erase" code="BlendMode.ERASE" />
            <c text="@blend.hardlight" code="BlendMode.HARDLIGHT" />
            <c text="@blend.invert" code="BlendMode.INVERT" />
            <c text="@blend.lighten" code="BlendMode.LIGHTEN" />
            <c text="@blend.multiply" code="BlendMode.MULTIPLY" />
            <c text="@blend.normal" code="BlendMode.NORMAL" />
            <c text="@blend.overlay" code="BlendMode.OVERLAY" />
            <c text="@blend.screen" code="BlendMode.SCREEN" />
            <c text="@blend.subtract" code="BlendMode.SUBTRACT" />
        </choices>
    </dropdown>

    <dropdown id="greaterLessThan">
        <choices>
            <c text="@greater" code="&gt;" />
            <c text="@less" code="&lt;" />
        </choices>
    </dropdown>

    <dropdown id="grav">
        <choices>
            <c text="@horizontal" code="x" />
            <c text="@vertical" code="y" />
        </choices>
    </dropdown>

    <dropdown id="equalUnequal">
        <choices>
            <c text="@equal" code="" />
            <c text="@notequal" code="!" />
        </choices>
    </dropdown>

    <dropdown id="multitouchPart">
        <choices>
            <c text="@ID" code="touchPointID)" />
            <c text="@x" code="stageX - Engine.screenOffsetX) / (Engine.screenScaleX * Engine.SCALE)" />
            <c text="@y" code="stageY - Engine.screenOffsetY) / (Engine.screenScaleY * Engine.SCALE)" />
        </choices>
    </dropdown>

    <dropdown id="deviceStates2">
        <choices>
            <c text="@touched" code="0" />
            <c text="@dragged" code="1" />
            <c text="@released" code="2" />
        </choices>
    </dropdown>

    <dropdown id="allDevices">
        <choices>
            <c text="@ios.standard" code="Engine.isStandardIOS" />
            <c text="@ios.extended" code="Engine.isExtendedIOS" />
            <c text="@ios.tablet" code="Engine.isTabletIOS" />
        </choices>
    </dropdown>

    <dropdown id="drawFill">
        <choices>
            <c text="@draw" code="draw" />
            <c text="@fill" code="fill" />
        </choices>
    </dropdown>

    <dropdown id="firstSecondAB">
        <choices>
            <c text="@first" code="A" />
            <c text="@second" code="B" />
        </choices>
    </dropdown>

    <dropdown id="is">
        <choices>
            <c text="@is" code="true" />
            <c text="@isnt" code="false" />
        </choices>
    </dropdown>

    <dropdown id="upDownLeftRight">
        <choices>
            <c text="@up" code="Up" />
            <c text="@down" code="Down" />
            <c text="@left" code="Left" />
            <c text="@right" code="Right" />
        </choices>
    </dropdown>

    <dropdown id="xyVelocity">
        <choices>
            <c text="@xspeed" code="XVelocity" />
            <c text="@yspeed" code="YVelocity" />
        </choices>
    </dropdown>

    <dropdown id="key">
        <choices>
            <c text="@in.enter" code="ENTER" />
            <c text="@in.backspace" code="BACKSPACE" />
            <c text="@in.delete" code="DELETE" />
            <c text="@in.shift" code="SHIFT" />
            <c text="@in.ctrl" code="CONTROL" />
        </choices>
    </dropdown>

    <dropdown id="mouseLocations">
        <choices>
            <c text="@in.mouse.loc" code="" />
            <c text="@in.mouse.pressloc" code="Pressed" />
            <c text="@in.mouse.releaseloc" code="Released" />
        </choices>
    </dropdown>

    <dropdown id="tiled">
        <choices>
            <c text="@tiled" code="true" />
            <c text="@nontiled" code="false" />
        </choices>
    </dropdown>

    <dropdown id="fadeInOut">
        <choices>
            <c text="@fadein" code="fadeIn" />
            <c text="@fadeout" code="fadeOut" />
        </choices>
    </dropdown>

    <dropdown id="touchDragRelease">
        <choices>
            <c text="@touch" code="Pressed" />
            <c text="@drag" code="" />
            <c text="@release" code="Released" />
            <c text="@curtouch" code="" />
        </choices>
    </dropdown>

    <dropdown id="layerIDs">
        <choices>
            <c text="@ID" code="0" />
            <c text="@name" code="1" />
        </choices>
    </dropdown>

    <dropdown id="throughTransitions">
        <choices>
            <c text="@transition.crossfade" code="createCrossfadeTransition" />
            <c text="@transition.slide.up" code="createSlideUpTransition" />
            <c text="@transition.slide.down" code="createSlideDownTransition" />
            <c text="@transition.slide.left" code="createSlideLeftTransition" />
            <c text="@transition.slide.right" code="createSlideRightTransition" />
        </choices>
    </dropdown>

    <dropdown id="touchedDraggedReleased2">
        <choices>
            <c text="@touched" code="Pressed" />
            <c text="@isdragging" code="Down" />
            <c text="@released" code="Released" />
            <c text="@istouching" code="Down" />
        </choices>
    </dropdown>

    <dropdown id="kupDown">
        <choices>
            <c text="@down" code="" />
            <c text="@up" code="!" />
        </choices>
    </dropdown>

    <dropdown id="xy">
        <choices>
            <c text="@x" code="X" />
            <c text="@y" code="Y" />
        </choices>
    </dropdown>

    <dropdown id="topBottomLeftRight">
        <choices>
            <c text="@topside" code="top" />
            <c text="@bottomside" code="bottom" />
            <c text="@leftside" code="left" />
            <c text="@rightside" code="right" />
        </choices>
    </dropdown>

    <dropdown id="collisionPoints">
        <choices>
            <c text="@x" code="x" />
            <c text="@y" code="y" />
            <c text="@collision.normal.x" code="normalX" />
            <c text="@collision.normal.y" code="normalY" />
        </choices>
    </dropdown>

    <dropdown id="collisionType">
        <choices>
            <c text="@collision.hit.actor" code="Actor" />
            <c text="@collision.hit.terrain" code="Terrain" />
            <c text="@collision.hit.tile" code="Tile" />
            <c text="@collision.hit.sensor" code="Sensor" />
        </choices>
    </dropdown>

    <dropdown id="layers">
        <choices>
            <c text="@layer.front" code="Script.FRONT" />
            <c text="@layer.middle" code="Script.MIDDLE" />
            <c text="@layer.back" code="Script.BACK" />
        </choices>
    </dropdown>

    <dropdown id="sceneWidthHeight">
        <choices>
            <c text="@scene.scenewh.wp" code="getSceneWidth()" />
            <c text="@scene.scenewh.hp" code="getSceneHeight()" />
            <c text="@scene.scenewh.wt" code="Std.int(getSceneWidth()/getTileWidth())" />
            <c text="@scene.scenewh.ht" code="Std.int(getSceneHeight()/getTileHeight())" />
        </choices>
    </dropdown>

    <dropdown id="touchedDraggedReleased">
        <choices>
            <c text="@started" code="Pressed" />
            <c text="@dragged" code="Down" />
            <c text="@released" code="Released" />
            <c text="@down" code="Down" />
        </choices>
    </dropdown>

    <dropdown id="pauseState">
        <choices>
            <c text="@paused" code="" />
            <c text="@unpaused" code="!" />
        </choices>
    </dropdown>

    <dropdown id="alwaysSometimes">
        <choices>
            <c text="@always" code="Always" />
            <c text="@sometimes" code="Sometimes" />
        </choices>
    </dropdown>

    <dropdown id="inputHover">
        <choices>
            <c text="@in.hover.yes" code="" />
            <c text="@in.hover.no" code="!" />
        </choices>
    </dropdown>

    <dropdown id="responseType">
        <choices>
            <c text="@sactor.shape.sensor" code="&quot;sensor&quot;" />
            <c text="@sactor.shape.solid" code="&quot;solid&quot;" />
        </choices>
    </dropdown>

    <dropdown id="drawFill2">
        <choices>
            <c text="@draw.outlined" code="Draw" />
            <c text="@draw.filled" code="Fill" />
        </choices>
    </dropdown>

    <dropdown id="transToBy">
        <choices>
            <c text="@by" code="translate" />
            <c text="@to" code="moveTo" />
        </choices>
    </dropdown>

    <dropdown id="outTransitions">
        <choices>
            <c text="@transition.fadeout" code="createFadeOut" />
            <c text="@transition.blinds.out" code="createBlindsOut" />
            <c text="@transition.bubbles.out" code="createBubblesOut" />
            <c text="@transition.circle.out" code="createCircleOut" />
            <c text="@transition.pixel.out" code="createPixelizeOut" />
            <c text="@transition.box.out" code="createRectangleOut" />
        </choices>
    </dropdown>

    <dropdown id="collisionActors">
        <choices>
            <c text="@col.actor1" code="this" />
            <c text="@col.actor2" code="other" />
        </choices>
    </dropdown>

    <dropdown id="entersExits2">
        <choices>
            <c text="@enters" code="Entered" />
            <c text="@exits" code="Exited" />
        </choices>
    </dropdown>

    <dropdown id="mouseStates">
        <choices>
            <c text="@enters" code="1" />
            <c text="@exits" code="-1" />
            <c text="@pressedon" code="3" />
            <c text="@draggedon" code="4" />
            <c text="@releasedon" code="5" />
        </choices>
    </dropdown>

    <dropdown id="value">
        <choices>
            <c text="@value.hasvalue" code="" />
            <c text="@value.hasnovalue" code="!" />
        </choices>
    </dropdown>

    <dropdown id="degreesRadians">
        <choices>
            <c text="@degrees" code="DEG" />
            <c text="@radians" code="RAD" />
        </choices>
    </dropdown>

    <dropdown id="xyCenterScreen">
        <choices>
            <c text="@x" code="X" />
            <c text="@y" code="Y" />
            <c text="@xc" code="XCenter" />
            <c text="@yc" code="YCenter" />
            <c text="@xscreen" code="ScreenX" />
            <c text="@yscreen" code="ScreenY" />
        </choices>
    </dropdown>

    <dropdown id="upperLower">
        <choices>
            <c text="@upper" code="Upper" />
            <c text="@lower" code="Lower" />
        </choices>
    </dropdown>

    <dropdown id="byTo">
        <choices>
            <c text="@by" code="By" />
            <c text="@to" code="To" />
        </choices>
    </dropdown>

    <dropdown id="inTransitions">
        <choices>
            <c text="@transition.fadein" code="createFadeIn" />
            <c text="@transition.blinds.in" code="createBlindsIn" />
            <c text="@transition.bubbles.in" code="createBubblesIn" />
            <c text="@transition.circle.in" code="createCircleIn" />
            <c text="@transition.pixel.in" code="createPixelizeIn" />
            <c text="@transition.box.in" code="createRectangleIn" />
        </choices>
    </dropdown>

    <dropdown id="collisionHit">
        <choices>
            <c text="@collision.hit.yes" code="" />
            <c text="@collision.hit.no" code="!" />
        </choices>
    </dropdown>

    <dropdown id="entersExits">
        <choices>
            <c text="@enters" code="entered" />
            <c text="@exits" code="exited" />
        </choices>
    </dropdown>

    <dropdown id="passOrNot">
        <choices>
            <c text="@block.enable" code="NotPass" />
            <c text="@block.disable" code="Pass" />
        </choices>
    </dropdown>

    <dropdown id="imageProps3">
        <choices>
            <c text="@x" code="x/Engine.SCALE" />
            <c text="@y" code="y/Engine.SCALE" />
            <c text="@direction" code="rotation" />
            <c text="@width" code="width/Engine.SCALE" />
            <c text="@height" code="height/Engine.SCALE" />
            <c text="@scalex" code="scaleX*100" />
            <c text="@scaley" code="scaleY*100" />
            <c text="@alpha" code="alpha" />
        </choices>
    </dropdown>

    <dropdown id="showHideEnableDisable">
        <choices>
            <c text="@block.show" code="enable" />
            <c text="@block.hide" code="disable" />
        </choices>
    </dropdown>

    <dropdown id="smallerLarger">
        <choices>
            <c text="@smaller" code="min" />
            <c text="@larger" code="max" />
        </choices>
    </dropdown>

    <dropdown id="pressRelease">
        <choices>
            <c text="@press" code="Press" />
            <c text="@release" code="Release" />
        </choices>
    </dropdown>

    <dropdown id="widthHeightHalf">
        <choices>
            <c text="@width" code="Width()" />
            <c text="@height" code="Height()" />
            <c text="@hwidth" code="Width()/2" />
            <c text="@hheight" code="Height()/2" />
        </choices>
    </dropdown>

    <dropdown id="incDec">
        <choices>
            <c text="@increment" code="+" />
            <c text="@decrement" code="-" />
        </choices>
    </dropdown>

    <dropdown id="allPositions">
        <choices>
            <c text="@x" code="X" />
            <c text="@y" code="Y" />
            <c text="@xc" code="XCenter" />
            <c text="@yc" code="YCenter" />
        </choices>
    </dropdown>

    <dropdown id="pressedReleased">
        <choices>
            <c text="@pressed" code="pressed" />
            <c text="@released" code="released" />
        </choices>
    </dropdown>

    <dropdown id="inputPress">
        <choices>
            <c text="@in.press.yes" code="" />
            <c text="@in.press.no" code="!" />
        </choices>
    </dropdown>

    <dropdown id="moveWithinLayer">
        <choices>
            <c text="@down" code="Down" />
            <c text="@up" code="Up" />
            <c text="@tothebottom" code="ToBottom" />
            <c text="@tothetop" code="ToTop" />
        </choices>
    </dropdown>

    <dropdown id="soundPlayback">
        <choices>
            <c text="@stop" code="stop" />
            <c text="@pause" code="pause" />
            <c text="@resume" code="resume" />
        </choices>
    </dropdown>

    <dropdown id="degreesRadiansInline">
        <choices>
            <c text="@degrees" code="* Utils.RAD" />
            <c text="@radians" code="" />
        </choices>
    </dropdown>

    <dropdown id="mask">
        <choices>
            <c text="@clear" code="clearImageUsingMask" />
            <c text="@retain" code="retainImageUsingMask" />
        </choices>
    </dropdown>

    <dropdown id="physics">
        <choices>
            <c text="@friction" code="Friction" />
            <c text="@bounciness" code="Bounciness" />
            <c text="@mass" code="Mass" />
            <c text="@angularmass" code="AngularMass" />
            <c text="@lineardamping" code="LinearDamping" />
            <c text="@angulardamping" code="AngularDamping" />
        </choices>
    </dropdown>

    <dropdown id="horizVert">
        <choices>
            <c text="@horizontal" code="Horizontal" />
            <c text="@vertical" code="Vertical" />
        </choices>
    </dropdown>

    <dropdown id="mouseActor">
        <choices>
            <c text="@in.down.actor.yes" code="Down" />
            <c text="@in.press.actor.yes" code="Pressed" />
            <c text="@in.release.actor.yes" code="Released" />
            <c text="@in.over.yes" code="Over" />
        </choices>
    </dropdown>

    <dropdown id="inputRelease">
        <choices>
            <c text="@in.release.yes" code="" />
            <c text="@in.release.no" code="!" />
        </choices>
    </dropdown>

    <dropdown id="columnRow">
        <choices>
            <c text="@scene.tile.col" code="0" />
            <c text="@scene.tile.row" code="1" />
        </choices>
    </dropdown>

    <block tag="init"
           code="#{0}"
           spec="@event.init"
           help="@event.init.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-basics">
        <fields>
            <code-block order="0" />
        </fields>
    </block>

    <block tag="draw"
           spec="@event.draw"
           help="@event.draw.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-basics">
        <code>
            <event-def
                innerCode="#{0}"
                listener="addListener(${thisActorOrEngine}.whenDrawing, ${eventRef});"
                params="g:G, x:Float, y:Float">
            </event-def>
        </code>
        <fields>
            <code-block order="0" />
        </fields>
        <context>
            <innerContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="step"
           spec="@event.step"
           help="@event.step.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-basics">
        <code>
            <event-def
                innerCode="#{0}"
                listener="addListener(${thisActorOrEngine}.whenUpdated, ${eventRef});"
                params="elapsedTime:Float">
            </event-def>
        </code>
        <fields>
            <code-block order="0" />
        </fields>
    </block>

    <block tag="event-key-press-release"
           spec="@event.key.pressrelease"
           help="@event.key.pressrelease.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-input">
        <code>
            <event-def
                condition="#{1}"
                innerCode="#{2}"
                listener="addListener(engine.whenKeyPressedEvents.getOrCreateEvent(#{0}), ${eventRef});"
                params="pressed:Bool, released:Bool">
            </event-def>
        </code>
        <fields>
            <control order="0" />
            <dropdown order="1" id="pressedReleased" />
            <code-block order="2" />
        </fields>
    </block>

    <block tag="key-code"
           code="event.keyCode"
           spec="@event.helper.keycode"
           help="@event.helper.keycode.help"
           type="normal"
           returns="int"
           category="input"
           hidden="true"
           helpURL="event-input">
        <context>
            <requiredContext type="has" value="event:openfl.events.KeyboardEvent" />
        </context>
    </block>

    <block tag="key-char"
           code="charFromCharCode(event.charCode)"
           spec="@event.helper.keychar"
           help="@event.helper.keychar.help"
           type="normal"
           returns="text"
           category="input"
           hidden="true"
           helpURL="event-input">
        <context>
            <requiredContext type="has" value="event:openfl.events.KeyboardEvent" />
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="event-key-any-press-release"
           spec="@event.key.anypressrelease"
           help="@event.key.anypressrelease.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-input">
        <code>
            <event-def
                innerCode="#{1}"
                listener="addListener(engine.whenAnyKey#{0}, ${eventRef});"
                params="event:KeyboardEvent">
            </event-def>
        </code>
        <fields>
            <dropdown order="0" id="anyPressedReleased" />
            <code-block order="1" />
            <attached-block order="2" tag="key-code" />
            <attached-block order="3" tag="key-char" />
        </fields>
        <context>
            <innerContext type="has" value="event:openfl.events.KeyboardEvent" />
        </context>
    </block>

    <block tag="event-mouse-press-release"
           spec="@event.mouse.pressrelease"
           help="@event.mouse.pressrelease.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-input">
        <code>
            <event-def
                innerCode="#{1}"
                listener="addListener(engine.whenMouse#{0}, ${eventRef});"
                params="">
            </event-def>
        </code>
        <fields>
            <dropdown order="0" id="pressedReleasedMovedDragged" />
            <code-block order="1" />
        </fields>
    </block>

    <block tag="event-mouse-enter-exit-actor"
           spec="@event.mouse.enterexitactor"
           help="@event.mouse.enterexitactor.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-input">
        <code>
            <event-def
                condition="#{1} == mouseState"
                innerCode="#{2}"
                listener="addListener(#{0}.whenMousedOver, ${eventRef});"
                params="mouseState:Int">
            </event-def>
        </code>
        <fields>
            <actor order="0" />
            <dropdown order="1" id="mouseStates" />
            <code-block order="2" />
        </fields>
    </block>

    <block tag="event-mouse-enter-exit-region"
           spec="@event.mouse.enterexitregion"
           help="@event.mouse.enterexitregion.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-input">
        <code>
            <event-def
                condition="#{1} == mouseState"
                innerCode="#{2}"
                listener="addListener(#{0}.whenMousedOver, ${eventRef});"
                params="mouseState:Int">
            </event-def>
        </code>
        <fields>
            <region order="0" />
            <dropdown order="1" id="mouseStates" />
            <code-block order="2" />
        </fields>
    </block>

    <block tag="gamepad-input"
           code="input"
           spec="@event.helper.gamepad.input"
           help="@event.helper.gamepad.input.help"
           type="normal"
           returns="text"
           category="input"
           hidden="true"
           helpURL="event-input">
        <context>
            <requiredContext type="has" value="input:String" />
        </context>
    </block>

    <block tag="event-gamepad-any-press-release"
           spec="@event.gamepad.anypressrelease"
           help="@event.gamepad.anypressrelease.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-input">
        <code>
            <event-def
                innerCode="#{1}"
                listener="addListener(engine.whenAnyGamepad#{0}, ${eventRef});"
                params="input:String">
            </event-def>
        </code>
        <fields>
            <dropdown order="0" id="anyPressedReleased" />
            <code-block order="1" />
            <attached-block order="2" tag="gamepad-input" />
        </fields>
        <context>
            <innerContext type="has" value="input:String" />
        </context>
    </block>

    <block tag="event-device-swipe"
           spec="@event.device.swipe"
           help="@event.device.swipe.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-input">
        <code>
            <event-def
                condition="Input.swiped#{0}"
                innerCode="#{1}"
                listener="addListener(engine.whenSwiped, ${eventRef});"
                params="">
            </event-def>
        </code>
        <fields>
            <dropdown order="0" id="upDownLeftRight" />
            <code-block order="1" />
        </fields>
    </block>

    <block tag="mobile-multitouch"
           code="(event.#{0}"
           spec="@event.helper.mobile.multitouch"
           help="@event.helper.mobile.multitouch.help"
           type="normal"
           returns="number"
           category="mobile"
           hidden="true"
           helpURL="event-input">
        <fields>
            <dropdown order="0" id="multitouchPart" />
        </fields>
        <context>
            <requiredContext type="has" value="event:openfl.events.TouchEvent" />
        </context>
    </block>

    <block tag="event-device-multitouch"
           spec="@event.device.multitouch"
           help="@event.device.multitouch.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-input">
        <code>
            <event-def
                innerCode="#{1}"
                listener="addListener(engine.whenMT#{0}, ${eventRef});"
                params="event:TouchEvent">
            </event-def>
        </code>
        <fields>
            <dropdown order="0" id="multitouch" />
            <code-block order="1" />
            <attached-block order="2" tag="mobile-multitouch" />
        </fields>
        <context>
            <innerContext type="has" value="event:openfl.events.TouchEvent" />
        </context>
    </block>

    <block tag="event-focus-changed"
           spec="@event.focus.changed"
           help="@event.focus.changed.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-input">
        <code>
            <event-def
                condition="#{0}lost"
                innerCode="#{1}"
                listener="addListener(engine.whenFocusChanged, ${eventRef});"
                params="lost:Bool">
            </event-def>
        </code>
        <fields>
            <dropdown order="0" id="focusState" />
            <code-block order="1" />
        </fields>
    </block>

    <block tag="event-delay"
           spec="@flow.dolater"
           help="@flow.dolater.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-time">
        <code>
            <event-def
                innerCode="#{1}"
                listener="runLater(1000 * #{0}, ${eventRef}, ${thisActor});"
                params="timeTask:TimedTask">
            </event-def>
        </code>
        <fields>
            <number order="0" />
            <code-block order="1" />
        </fields>
        <context>
            <innerContext type="has" value="timeTask:com.stencyl.behavior.TimedTask" />
        </context>
    </block>

    <block tag="event-periodic"
           spec="@flow.periodic"
           help="@flow.periodic.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-time">
        <code>
            <event-def
                innerCode="#{1}"
                listener="runPeriodically(1000 * #{0}, ${eventRef}, ${thisActor});"
                params="timeTask:TimedTask">
            </event-def>
        </code>
        <fields>
            <number order="0" />
            <code-block order="1" />
        </fields>
        <context>
            <innerContext type="has" value="timeTask:com.stencyl.behavior.TimedTask" />
        </context>
    </block>

    <block tag="event-paused"
           spec="@event.paused"
           help="@event.paused.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-time">
        <code>
            <event-def
                condition="#{0}paused"
                innerCode="#{1}"
                listener="addListener(engine.whenPaused, ${eventRef});"
                params="paused:Bool">
            </event-def>
        </code>
        <fields>
            <dropdown order="0" id="pauseState" />
            <code-block order="1" />
        </fields>
    </block>

    <block tag="event-actor-create-kill"
           spec="@event.actor.createkill"
           help="@event.actor.createkill.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-actors">
        <code>
            <event-def
                innerCode="#{2}"
                listener="addListener(#{1}.when#{0}, ${eventRef});"
                params="">
            </event-def>
        </code>
        <fields>
            <dropdown order="0" id="actorCreateKill" />
            <actor order="1" />
            <code-block order="2" />
        </fields>
    </block>

    <block tag="actor-created-killed"
           code="eventActor"
           spec="@event.helper.actorcreated"
           help="@event.helper.actorcreated.help"
           type="normal"
           returns="actor"
           category="actors"
           hidden="true"
           helpURL="event-actors">
        <context>
            <requiredContext type="has" value="eventActor:com.stencyl.models.Actor" />
        </context>
    </block>

    <block tag="event-type-create-kill"
           spec="@event.type.createkill"
           help="@event.type.createkill.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-actors">
        <code>
            <event-def
                innerCode="#{2}"
                listener="addListenerWithKey(engine.whenTypeGroup#{0}Events, #{1}.ID, ${eventRef});"
                params="eventActor:Actor">
            </event-def>
        </code>
        <fields>
            <dropdown order="0" id="actorCreateKill" />
            <actortype order="1" />
            <code-block order="2" />
            <attached-block order="3" tag="actor-created-killed" />
        </fields>
        <context>
            <innerContext type="has" value="eventActor:com.stencyl.models.Actor" />
        </context>
    </block>

    <block tag="event-group-create-kill"
           spec="@event.group.createkill"
           help="@event.group.createkill.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-actors">
        <code>
            <event-def
                innerCode="#{2}"
                listener="addListenerWithKey(engine.whenTypeGroup#{0}Events, Actor.GROUP_OFFSET + #{1}.ID, ${eventRef});"
                params="eventActor:Actor">
            </event-def>
        </code>
        <fields>
            <dropdown order="0" id="actorCreateKill" />
            <actorgroup order="1" />
            <code-block order="2" />
            <attached-block order="3" tag="actor-created-killed" />
        </fields>
        <context>
            <innerContext type="has" value="eventActor:com.stencyl.models.Actor" />
        </context>
    </block>

    <block tag="event-actor-region"
           spec="@event.actor.region"
           help="@event.actor.region.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-actors">
        <code>
            <event-def
                condition="sameAs(#{2}, a)"
                innerCode="#{3}"
                listener="addListener(#{1}.whenActor#{0}, ${eventRef});"
                params="a:Actor">
            </event-def>
        </code>
        <fields>
            <dropdown order="0" id="entersExits2" />
            <region order="1" />
            <actor order="2" />
            <code-block order="3" />
        </fields>
        <context>
            <innerContext type="has" value="a:com.stencyl.models.Actor" />
        </context>
    </block>

    <block tag="actor-entered-exited"
           code="a"
           spec="@event.helper.actorentered"
           help="@event.helper.actorentered.help"
           type="normal"
           returns="actor"
           category="actors"
           hidden="true"
           helpURL="event-actors">
        <context>
            <requiredContext type="has" value="a:com.stencyl.models.Actor" />
        </context>
    </block>

    <block tag="event-type-region"
           spec="@event.type.region"
           help="@event.type.region.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-actors">
        <code>
            <event-def
                condition="sameAsAny(#{2}, a.getType(), a.getGroup())"
                innerCode="#{3}"
                listener="addListener(#{1}.whenActor#{0}, ${eventRef});"
                params="a:Actor">
            </event-def>
        </code>
        <fields>
            <dropdown order="0" id="entersExits2" />
            <region order="1" />
            <actortype order="2" />
            <code-block order="3" />
            <attached-block order="4" tag="actor-entered-exited" />
        </fields>
        <context>
            <innerContext type="has" value="a:com.stencyl.models.Actor" />
        </context>
    </block>

    <block tag="event-group-region"
           spec="@event.group.region"
           help="@event.group.region.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-actors">
        <code>
            <event-def
                condition="sameAsAny(#{2}, a.getType(), a.getGroup())"
                innerCode="#{3}"
                listener="addListener(#{1}.whenActor#{0}, ${eventRef});"
                params="a:Actor">
            </event-def>
        </code>
        <fields>
            <dropdown order="0" id="entersExits2" />
            <region order="1" />
            <actorgroup order="2" />
            <code-block order="3" />
            <attached-block order="4" tag="actor-entered-exited" />
        </fields>
        <context>
            <innerContext type="has" value="a:com.stencyl.models.Actor" />
        </context>
    </block>

    <block tag="event-actor-screen"
           spec="@event.actor.screen"
           help="@event.actor.screen.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-actors">
        <code>
            <event-def
                condition="#{1}#{2}"
                innerCode="#{3}"
                listener="addListener(#{0}.whenPositionStateChanged, ${eventRef});"
                params="enteredScreen:Bool, exitedScreen:Bool, enteredScene:Bool, exitedScene:Bool">
            </event-def>
        </code>
        <fields>
            <actor order="0" />
            <dropdown order="1" id="entersExits" />
            <dropdown order="2" id="sceneScreen" />
            <code-block order="3" />
        </fields>
    </block>

    <block tag="event-type-screen"
           spec="@event.type.screen"
           help="@event.type.screen.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-actors">
        <code>
            <event-def
                condition="#{1}#{2}"
                innerCode="#{3}"
                listener="addListenerWithKey(engine.whenTypeGroupPositionStateChangedEvents, #{0}.ID, ${eventRef});"
                params="a:Actor, enteredScreen:Bool, exitedScreen:Bool, enteredScene:Bool, exitedScene:Bool">
            </event-def>
        </code>
        <fields>
            <actortype order="0" />
            <dropdown order="1" id="entersExits" />
            <dropdown order="2" id="sceneScreen" />
            <code-block order="3" />
            <attached-block order="4" tag="actor-entered-exited" />
        </fields>
        <context>
            <innerContext type="has" value="a:com.stencyl.models.Actor" />
        </context>
    </block>

    <block tag="event-group-screen"
           spec="@event.group.screen"
           help="@event.group.screen.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-actors">
        <code>
            <event-def
                condition="#{1}#{2}"
                innerCode="#{3}"
                listener="addListenerWithKey(engine.whenTypeGroupPositionStateChangedEvents, #{0}.ID + 1000000, ${eventRef});"
                params="a:Actor, enteredScreen:Bool, exitedScreen:Bool, enteredScene:Bool, exitedScene:Bool">
            </event-def>
        </code>
        <fields>
            <actorgroup order="0" />
            <dropdown order="1" id="entersExits" />
            <dropdown order="2" id="sceneScreen" />
            <code-block order="3" />
            <attached-block order="4" tag="actor-entered-exited" />
        </fields>
        <context>
            <innerContext type="has" value="a:com.stencyl.models.Actor" />
        </context>
    </block>

    <block tag="other-actor"
           code="event.otherActor"
           spec="@event.helper.otheractor"
           help="@event.helper.otheractor.help"
           type="normal"
           returns="actor"
           category="actors"
           hidden="true"
           helpURL="event-collisions">
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="second-actor"
           code="event.otherActor"
           spec="@event.helper.secondactor"
           help="@event.helper.secondactor.help"
           type="normal"
           returns="actor"
           category="actors"
           hidden="true"
           helpURL="event-collisions">
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="this-actor"
           code="event.thisActor"
           spec="@event.helper.thisactor"
           help="@event.helper.thisactor.help"
           type="normal"
           returns="actor"
           category="actors"
           hidden="true"
           helpURL="event-collisions">
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="first-actor"
           code="event.thisActor"
           spec="@event.helper.firstactor"
           help="@event.helper.firstactor.help"
           type="normal"
           returns="actor"
           category="actors"
           hidden="true"
           helpURL="event-collisions">
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collide-member-of-group"
           code="event.otherActor"
           spec="@event.helper.memberofgroup"
           help="@event.helper.memberofgroup.help"
           type="normal"
           returns="actor"
           category="actors"
           hidden="true"
           helpURL="event-collisions">
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collide-actor-of-type"
           code="event.otherActor"
           spec="@event.helper.actoroftype"
           help="@event.helper.actoroftype.help"
           type="normal"
           returns="actor"
           category="actors"
           hidden="true"
           helpURL="event-collisions">
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collide"
           spec="@event.collide"
           help="@event.collide.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-collisions">
        <code>
            <event-def
                innerCode="#{0}"
                listener="addListener(actor.whenCollided, ${eventRef});"
                params="event:Collision">
            </event-def>
        </code>
        <fields>
            <code-block order="0" />
            <attached-block order="1" tag="this-actor" />
            <attached-block order="2" tag="other-actor" />
        </fields>
        <context>
            <innerContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="event-collide-actortoactor"
           spec="@event.collide.actortoactor"
           help="@event.collide.actortoactor.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-collisions">
        <code>
            <event-def
                condition="(#{1} == event.otherActor)"
                innerCode="#{2}"
                listener="addListener(#{0}.whenCollided, ${eventRef});"
                params="event:Collision">
            </event-def>
        </code>
        <fields>
            <actor order="0" />
            <actor order="1" />
            <code-block order="2" />
            <attached-block order="3" tag="first-actor" />
            <attached-block order="4" tag="second-actor" />
        </fields>
        <context>
            <innerContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="event-collide-actortotype"
           spec="@event.collide.actortotype"
           help="@event.collide.actortotype.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-collisions">
        <code>
            <event-def
                condition="sameAsAny(#{1}, event.otherActor.getType(), event.otherActor.getGroup())"
                innerCode="#{2}"
                listener="addListener(#{0}.whenCollided, ${eventRef});"
                params="event:Collision">
            </event-def>
        </code>
        <fields>
            <actor order="0" />
            <actortype order="1" />
            <code-block order="2" />
            <attached-block order="3" tag="first-actor" />
            <attached-block order="4" tag="collide-actor-of-type" />
        </fields>
        <context>
            <innerContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="event-collide-actortogroup"
           spec="@event.collide.actortogroup"
           help="@event.collide.actortogroup.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-collisions">
        <code>
            <event-def
                condition="sameAsAny(#{1}, event.otherActor.getType(), event.otherActor.getGroup())"
                innerCode="#{2}"
                listener="addListener(#{0}.whenCollided, ${eventRef});"
                params="event:Collision">
            </event-def>
        </code>
        <fields>
            <actor order="0" />
            <actorgroup order="1" />
            <code-block order="2" />
            <attached-block order="3" tag="first-actor" />
            <attached-block order="4" tag="collide-member-of-group" />
        </fields>
        <context>
            <innerContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="event-collide-typetotype"
           spec="@event.collide.typetotype"
           help="@event.collide.typetotype.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-collisions">
        <code>
            <event-def
                innerCode="#{2}"
                listener="addListenerWithKey2(engine.whenCollidedEvents, #{0}.ID, #{1}.ID, ${eventRef});"
                params="event:Collision">
            </event-def>
        </code>
        <fields>
            <actortype order="0" />
            <actortype order="1" />
            <code-block order="2" />
            <attached-block order="3" tag="first-actor" />
            <attached-block order="4" tag="second-actor" />
        </fields>
        <context>
            <innerContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="event-collide-grouptogroup"
           spec="@event.collide.grouptogroup"
           help="@event.collide.grouptogroup.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-collisions">
        <code>
            <event-def
                innerCode="#{2}"
                listener="addListenerWithKey2(engine.whenCollidedEvents, #{0}.ID + 1000000, #{1}.ID + 1000000, ${eventRef});"
                params="event:Collision">
            </event-def>
        </code>
        <fields>
            <actorgroup order="0" />
            <actorgroup order="1" />
            <code-block order="2" />
            <attached-block order="3" tag="first-actor" />
            <attached-block order="4" tag="second-actor" />
        </fields>
        <context>
            <innerContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="event-sound-finished"
           spec="@event.soundfinished"
           help="@event.soundfinished.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-sound">
        <code>
            <event-def
                innerCode="#{1}"
                listener="addListenerWithKey(engine.whenSoundEndedEvents, #{0}, ${eventRef});"
                params="">
            </event-def>
        </code>
        <fields>
            <sound order="0" />
            <code-block order="1" />
        </fields>
    </block>

    <block tag="event-channel-finished"
           spec="@event.channelfinished"
           help="@event.channelfinished.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-sound">
        <code>
            <event-def
                innerCode="#{1}"
                listener="addListenerWithKey(engine.whenChannelEndedEvents, #{0}, ${eventRef});"
                params="">
            </event-def>
        </code>
        <fields>
            <number order="0" />
            <code-block order="1" />
        </fields>
    </block>

    <block tag="event-screen-fullscreen"
           spec="@event.screen.fullscreen"
           help="@event.screen.fullscreen.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-screen">
        <code>
            <event-def
                innerCode="#{0}"
                listener="addListener(engine.whenFullscreenChanged, ${eventRef});"
                params="">
            </event-def>
        </code>
        <fields>
            <code-block order="0" />
        </fields>
    </block>

    <block tag="event-screen-screensize"
           spec="@event.screen.screensize"
           help="@event.screen.screensize.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-screen">
        <code>
            <event-def
                innerCode="#{0}"
                listener="addListener(engine.whenScreenSizeChanged, ${eventRef});"
                params="">
            </event-def>
        </code>
        <fields>
            <code-block order="0" />
        </fields>
    </block>

    <block tag="event-screen-gamescale"
           spec="@event.screen.gamescale"
           help="@event.screen.gamescale.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-screen">
        <code>
            <event-def
                innerCode="#{0}"
                listener="addListener(engine.whenGameScaleChanged, ${eventRef});"
                params="">
            </event-def>
        </code>
        <fields>
            <code-block order="0" />
        </fields>
    </block>

    <block tag="event-att-number"
           spec="@event.att.number"
           help="@event.att.number.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-attributes">
        <code>
            <event-def
                condition="#{0} #{1} #{2}"
                innerCode="#{3}"
                listener="addListenerWithKey(propertyChangeEvents, &quot;#{0}&quot;, ${eventRef});&#10;checkProperties = true;"
                params="">
            </event-def>
        </code>
        <fields>
            <dropdown order="0">
                <choices supplier="var:number" />
            </dropdown>
            <dropdown order="1" id="greaterLessThan" />
            <number order="2" />
            <code-block order="3" />
        </fields>
    </block>

    <block tag="event-att-equals"
           spec="@event.att.equals"
           help="@event.att.equals.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-attributes">
        <code>
            <event-def
                condition="#{1}(#{0} == #{2})"
                innerCode="#{3}"
                listener="addListenerWithKey(propertyChangeEvents, &quot;#{0}&quot;, ${eventRef});&#10;addListenerWithKey(propertyChangeEvents, &quot;#{2}&quot;, ${eventRef});&#10;checkProperties = true;"
                params="">
            </event-def>
        </code>
        <fields>
            <dropdown order="0">
                <choices supplier="var:any" />
            </dropdown>
            <dropdown order="1" id="equalUnequal" />
            <dropdown order="2">
                <choices supplier="var:any" />
            </dropdown>
            <code-block order="3" />
        </fields>
    </block>

    <block tag="event-att-bool"
           spec="@event.att.bool"
           help="@event.att.bool.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-attributes">
        <code>
            <event-def
                condition="#{0} == #{1}"
                innerCode="#{2}"
                listener="addListenerWithKey(propertyChangeEvents, &quot;#{0}&quot;, ${eventRef});&#10;checkProperties = true;"
                params="">
            </event-def>
        </code>
        <fields>
            <dropdown order="0">
                <choices supplier="var:boolean" />
            </dropdown>
            <boolean order="1" />
            <code-block order="2" />
        </fields>
    </block>

    <block tag="event-custom"
           code="public function _customEvent_#{0:eventName}():Void&#10;{&#10;#{1}&#10;}"
           spec="@event.msg"
           help="@event.msg.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-advanced">
        <code>
            <block-message-appender id="eventName"
                addMessageToBuilder="true">
            </block-message-appender>
        </code>
        <fields>
            <code order="0" />
            <code-block order="1" />
        </fields>
    </block>

    <block tag="event-custom-block"
           code=""
           spec="@event.cmsg"
           help="@event.cmsg.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-advanced">
        <fields>
            <code-block order="0" />
        </fields>
    </block>

    <block tag="event-custom-block-global"
           code=""
           spec="@event.cmsg2"
           help="@event.cmsg2.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-advanced">
        <fields>
            <code-block order="0" />
        </fields>
    </block>

    <block tag="event-custom-code"
           code="#{0}"
           spec="@event.custom.code"
           help="@event.custom.code.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-advanced">
        <fields>
            <code-block order="0" />
        </fields>
    </block>

    <block tag="event-custom-import"
           code="#{0}"
           spec="@event.custom.import"
           help="@event.custom.import.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-advanced">
        <fields>
            <code-block order="0" />
        </fields>
    </block>

    <block tag="event-device-touch"
           code="${deprecated}"
           spec="@event.device.touch"
           help="@event.device.touch.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-input"
           deprecated="true">
        <fields>
            <dropdown order="0" id="deviceStates" />
            <code-block order="1" />
        </fields>
    </block>

    <block tag="event-device-touch-actor"
           code="${deprecated}"
           spec="@event.device.touch.actor"
           help="@event.device.touch.actor.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-input"
           deprecated="true">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="deviceStates2" />
            <code-block order="2" />
        </fields>
    </block>

    <block tag="event-collide-actor"
           code="${deprecated}"
           spec="@event.collide.actor"
           help="@event.collide.actor.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-collisions"
           deprecated="true">
        <fields>
            <actor order="0" />
            <code-block order="1" />
            <attached-block order="2" tag="this-actor" />
            <attached-block order="3" tag="other-actor" />
        </fields>
        <context>
            <innerContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="event-collide-type"
           code="${deprecated}"
           spec="@event.collide.type"
           help="@event.collide.type.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-collisions"
           deprecated="true">
        <fields>
            <actortype order="0" />
            <code-block order="1" />
            <attached-block order="2" tag="this-actor" />
            <attached-block order="3" tag="collide-actor-of-type" />
        </fields>
        <context>
            <innerContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="event-collide-group"
           code="${deprecated}"
           spec="@event.collide.group"
           help="@event.collide.group.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-collisions"
           deprecated="true">
        <fields>
            <actorgroup order="0" />
            <code-block order="1" />
            <attached-block order="2" tag="this-actor" />
            <attached-block order="3" tag="collide-member-of-group" />
        </fields>
        <context>
            <innerContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="custom-receive-message"
           code="${deprecated}"
           spec="@event.cmsg"
           help="@event.cmsg.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-advanced"
           deprecated="true">
        <fields>
            <code-block order="0" />
        </fields>
    </block>

    <block tag="custom-receive-message2"
           code="${deprecated}"
           spec="@event.cmsg2"
           help="@event.cmsg2.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-advanced"
           deprecated="true">
        <fields>
            <code-block order="0" />
        </fields>
    </block>

    <block tag="receive-message"
           code="${deprecated}"
           spec="@event.msg"
           help="@event.msg.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-advanced"
           deprecated="true">
        <fields>
            <code order="0" />
            <code-block order="1" />
        </fields>
    </block>

    <block tag="receive-message-copy"
           code="${deprecated}"
           spec="@event.msg"
           help="@event.msg.help"
           type="event"
           returns="void"
           category="events"
           helpURL="event-advanced"
           deprecated="true">
        <fields>
            <code order="0" />
            <code-block order="1" />
        </fields>
    </block>

    <block tag="if"
           code="if(#{0})&#10;{&#10;#{1}&#10;}"
           spec="@flow.if"
           help="@flow.if.help"
           type="wrapper"
           returns="void"
           category="flow"
           helpURL="flow-conditions">
        <fields>
            <boolean order="0" />
            <code-block order="1" />
        </fields>
        <context>
            <immediate type="keyword" value="if" />
        </context>
    </block>

    <block tag="else"
           code="else&#10;{&#10;#{0}&#10;}"
           spec="@flow.else"
           help="@flow.else.help"
           type="wrapper"
           returns="void"
           category="flow"
           helpURL="flow-conditions">
        <fields>
            <code-block order="0" />
        </fields>
        <context>
            <requiredImmediate type="keyword" value="if" />
        </context>
    </block>

    <block tag="else-if"
           code="else if(#{0})&#10;{&#10;#{1}&#10;}"
           spec="@flow.elseif"
           help="@flow.elseif.help"
           type="wrapper"
           returns="void"
           category="flow"
           helpURL="flow-conditions">
        <fields>
            <boolean order="0" />
            <code-block order="1" />
        </fields>
        <context>
            <immediate type="keyword" value="if" />
            <requiredImmediate type="keyword" value="if" />
        </context>
    </block>

    <block tag="and"
           code="(#{0} &amp;&amp; #{1})"
           spec="@flow.and"
           help="@flow.and.help"
           type="normal"
           returns="boolean"
           category="numbers"
           helpURL="flow-conditions">
        <fields>
            <boolean order="0" />
            <boolean order="1" />
        </fields>
    </block>

    <block tag="or"
           code="(#{0} || #{1})"
           spec="@flow.or"
           help="@flow.or.help"
           type="normal"
           returns="boolean"
           category="numbers"
           helpURL="flow-conditions">
        <fields>
            <boolean order="0" />
            <boolean order="1" />
        </fields>
    </block>

    <block tag="not"
           code="!(#{0})"
           spec="@flow.not"
           help="@flow.not.help"
           type="normal"
           returns="boolean"
           category="numbers"
           helpURL="flow-conditions">
        <fields>
            <boolean order="0" />
        </fields>
    </block>

    <block tag="true"
           code="true"
           spec="@flow.true"
           help="@flow.true.help"
           type="normal"
           returns="boolean"
           category="numbers"
           helpURL="flow-conditions">
    </block>

    <block tag="false"
           code="false"
           spec="@flow.false"
           help="@flow.false.help"
           type="normal"
           returns="boolean"
           category="numbers"
           helpURL="flow-conditions">
    </block>

    <block tag="eq"
           code="(#{0} == #{1})"
           spec="@num.eq"
           help="@num.eq.help"
           type="normal"
           returns="boolean"
           category="numbers"
           helpURL="flow-conditions">
        <fields>
            <anything order="0" />
            <anything order="1" />
        </fields>
    </block>

    <block tag="noteq"
           code="!(#{0} == #{1})"
           spec="@num.noteq"
           help="@num.noteq.help"
           type="normal"
           returns="boolean"
           category="numbers"
           helpURL="flow-conditions">
        <fields>
            <anything order="0" />
            <anything order="1" />
        </fields>
    </block>

    <block tag="less"
           code="(#{0} &lt; #{1})"
           spec="@num.less"
           help="@num.less.help"
           type="normal"
           returns="boolean"
           category="numbers"
           helpURL="flow-conditions">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="lesseq"
           code="(#{0} &lt;= #{1})"
           spec="@num.lesseq"
           help="@num.lesseq.help"
           type="normal"
           returns="boolean"
           category="numbers"
           helpURL="flow-conditions">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="more"
           code="(#{0} &gt; #{1})"
           spec="@num.more"
           help="@num.more.help"
           type="normal"
           returns="boolean"
           category="numbers"
           helpURL="flow-conditions">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="moreeq"
           code="(#{0} &gt;= #{1})"
           spec="@num.moreeq"
           help="@num.moreeq.help"
           type="normal"
           returns="boolean"
           category="numbers"
           helpURL="flow-conditions">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="as-boolean"
           code="asBoolean(#{0})"
           spec="@flow.asboolean"
           help="@flow.asboolean.help"
           type="normal"
           returns="boolean"
           category="numbers"
           helpURL="flow-conditions">
        <fields>
            <anything order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="stop"
           code="return;"
           spec="@flow.stop"
           help="@flow.stop.help"
           type="action"
           returns="void"
           category="flow"
           helpURL="flow-conditions"
           isBottom="true">
    </block>

    <block tag="loopindex"
           code="index${repeatDepth}"
           spec="@flow.loopindex"
           help="@flow.loopindex.help"
           type="normal"
           returns="int"
           category="numbers"
           hidden="true"
           helpURL="flow-loops">
        <code>
            <nest-counter id="repeatDepth"
                tag="repeat">
            </nest-counter>
        </code>
    </block>

    <block tag="repeat"
           code="for(index${repeatDepth} in 0...#{0})&#10;{&#10;#{1}&#10;}"
           spec="@flow.repeat"
           help="@flow.repeat.help"
           type="wrapper"
           returns="void"
           category="flow"
           helpURL="flow-loops"
           isLoop="true">
        <code>
            <nest-counter id="repeatDepth"
                tag="repeat">
            </nest-counter>
        </code>
        <fields>
            <int order="0" />
            <code-block order="1" />
            <attached-block order="2" tag="loopindex" />
        </fields>
        <context>
            <innerContext type="keyword" value="break" />
            <innerContext type="keyword" value="continue" />
        </context>
    </block>

    <block tag="repeatu"
           code="while(!(#{0}))&#10;{&#10;#{1}&#10;}"
           spec="@flow.repeatu"
           help="@flow.repeatu.help"
           type="wrapper"
           returns="void"
           category="flow"
           helpURL="flow-loops"
           isLoop="true">
        <fields>
            <boolean order="0" />
            <code-block order="1" />
        </fields>
        <context>
            <innerContext type="keyword" value="break" />
            <innerContext type="keyword" value="continue" />
        </context>
    </block>

    <block tag="while"
           code="while(#{0})&#10;{&#10;#{1}&#10;}"
           spec="@flow.while"
           help="@flow.while.help"
           type="wrapper"
           returns="void"
           category="flow"
           helpURL="flow-loops"
           isLoop="true">
        <fields>
            <boolean order="0" />
            <code-block order="1" />
        </fields>
        <context>
            <innerContext type="keyword" value="break" />
            <innerContext type="keyword" value="continue" />
        </context>
    </block>

    <block tag="break"
           code="break;"
           spec="@flow.break"
           help="@flow.break.help"
           type="action"
           returns="void"
           category="flow"
           helpURL="flow-loops"
           isBottom="true">
        <context>
            <requiredContext type="keyword" value="break" />
        </context>
    </block>

    <block tag="continue"
           code="continue;"
           spec="@flow.continue"
           help="@flow.continue.help"
           type="action"
           returns="void"
           category="flow"
           helpURL="flow-loops"
           isBottom="true">
        <context>
            <requiredContext type="keyword" value="continue" />
        </context>
    </block>

    <block tag="dolater"
           code="runLater(1000 * #{0}, function(timeTask:TimedTask):Void&#10;{&#10;#{1}&#10;}, ${thisActor});"
           spec="@flow.dolater"
           help="@flow.dolater.help"
           type="wrapper"
           returns="void"
           category="flow"
           helpURL="flow-time">
        <fields>
            <number order="0" />
            <code-block order="1" />
        </fields>
        <context>
            <innerContext type="has" value="timeTask:com.stencyl.behavior.TimedTask" />
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="periodic"
           code="runPeriodically(1000 * #{0}, function(timeTask:TimedTask):Void&#10;{&#10;#{1}&#10;}, ${thisActor});"
           spec="@flow.periodic"
           help="@flow.periodic.help"
           type="wrapper"
           returns="void"
           category="flow"
           helpURL="flow-time">
        <fields>
            <number order="0" />
            <code-block order="1" />
        </fields>
        <context>
            <innerContext type="has" value="timeTask:com.stencyl.behavior.TimedTask" />
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="cancel"
           code="timeTask.repeats = false;&#10;return;"
           spec="@flow.cancel"
           help="@flow.cancel.help"
           type="action"
           returns="void"
           category="flow"
           helpURL="flow-time"
           isBottom="true">
        <context>
            <requiredContext type="has" value="timeTask:com.stencyl.behavior.TimedTask" />
        </context>
    </block>

    <block tag="print"
           code="trace(#{0:objectToString});"
           spec="@adv.print"
           help="@adv.print.help"
           type="action"
           returns="void"
           category="debug"
           helpURL="flow-debug">
        <fields>
            <anything order="0" />
        </fields>
    </block>

    <block tag="comment-short"
           code="/* #{0} */"
           spec="@adv.comment"
           help="@adv.comment.help"
           type="action"
           returns="void"
           category="comment"
           helpURL="flow-debug">
        <fields>
            <code order="0" />
        </fields>
    </block>

    <block tag="comment-long"
           code="/* #{0} */"
           spec="@adv.comment"
           help="@adv.comment.help"
           type="action"
           returns="void"
           category="comment"
           helpURL="flow-debug">
        <fields>
            <code order="0" />
        </fields>
    </block>

    <block tag="comment-wrapper"
           code="#{0:commentWrapper}"
           spec="@adv.comment"
           help="@adv.comment.help"
           type="wrapper"
           returns="void"
           category="comment"
           helpURL="flow-debug">
        <fields>
            <code order="0" />
            <code-block order="1" />
        </fields>
    </block>

    <block tag="debug-draw"
           code="#{0}DebugDrawing();"
           spec="@adv.debugdraw"
           help="@adv.debugdraw.help"
           type="action"
           returns="void"
           category="debug"
           helpURL="flow-debug">
        <fields>
            <dropdown order="0" id="enableDisable" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="code-short"
           code="#{0}"
           spec="@adv.customcode"
           help="@adv.customcode.help"
           type="normal"
           returns="code"
           category="debug"
           helpURL="flow-advanced">
        <fields>
            <code order="0" />
        </fields>
    </block>

    <block tag="custom-code"
           code="#{0}"
           spec="@adv.customcode"
           help="@adv.customcode.help"
           type="action"
           returns="void"
           category="debug"
           helpURL="flow-advanced">
        <fields>
            <code order="0" />
        </fields>
    </block>

    <block tag="code-long"
           code="#{0}"
           spec="@adv.customcode"
           help="@adv.customcode.help"
           type="action"
           returns="void"
           category="debug"
           helpURL="flow-advanced">
        <fields>
            <code order="0" />
        </fields>
    </block>

    <block tag="game-url"
           code="gameURL()"
           spec="@adv.gameurl"
           help="@adv.gameurl.help"
           type="normal"
           returns="text"
           category="debug"
           helpURL="flow-advanced">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="stepsize"
           code="getStepSize()"
           spec="@adv.stepsize"
           help="@adv.stepsize.help"
           type="normal"
           returns="int"
           category="debug"
           helpURL="flow-advanced">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="language"
           code="openfl.system.Capabilities.language"
           spec="@adv.language"
           help="@adv.language.help"
           type="normal"
           returns="text"
           category="debug"
           helpURL="flow-advanced">
    </block>

    <block tag="null"
           code="null"
           spec="@adv.null"
           help="@adv.null.help"
           type="normal"
           returns="anything"
           category="debug"
           helpURL="flow-advanced">
    </block>

    <block tag="is-platform"
           code="#if #{0} true #else false #end"
           spec="@adv.isplatform"
           help="@adv.isplatform.help"
           type="normal"
           returns="boolean"
           category="debug"
           helpURL="flow-advanced">
        <fields>
            <dropdown order="0" id="allPlatforms" />
        </fields>
    </block>

    <block tag="is-device2"
           code="#if(ios) #{0} #else false #end"
           spec="@adv.isplatform"
           help="@adv.isplatform.help"
           type="normal"
           returns="boolean"
           category="debug"
           helpURL="flow-advanced">
        <fields>
            <dropdown order="0" id="allDevices2" />
        </fields>
    </block>

    <block tag="do-on-platform"
           code="#if #{0}&#10;#{1}&#10;#end"
           spec="@adv.doplatform"
           help="@adv.doplatform.help"
           type="wrapper"
           returns="void"
           category="debug"
           helpURL="flow-advanced">
        <fields>
            <dropdown order="0" id="allPlatforms" />
            <code-block order="1" />
        </fields>
    </block>

    <block tag="exit-game"
           code="exitGame();"
           spec="@adv.exitgame"
           help="@adv.exitgame.help"
           type="action"
           returns="void"
           category="debug"
           helpURL="flow-advanced">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="load-unload-atlas"
           code="#{0}Atlas(#{1});"
           spec="@adv.loadunloadatlas"
           help="@adv.loadunloadatlas.help"
           type="action"
           returns="void"
           category="debug"
           helpURL="flow-advanced">
        <fields>
            <dropdown order="0" id="loadUnload" />
            <int order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="atlas-loaded"
           code="atlasIsLoaded(#{0})"
           spec="@adv.atlasloaded"
           help="@adv.atlasloaded.help"
           type="normal"
           returns="boolean"
           category="debug"
           helpURL="flow-advanced">
        <fields>
            <int order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="eq2"
           code="(#{0} == #{1})"
           spec="@num.eq2"
           help="@num.eq2.help"
           type="normal"
           returns="boolean"
           category="numbers"
           helpURL="flow-conditions"
           deprecated="true">
        <fields>
            <anything order="0" />
            <anything order="1" />
        </fields>
    </block>

    <block tag="fps"
           code="${deprecated}"
           spec="@adv.fps"
           help="@adv.fps.help"
           type="action"
           returns="void"
           category="debug"
           helpURL="flow-debug"
           deprecated="true">
        <fields>
            <number order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="show-fps"
           code="${deprecated}"
           spec="@adv.showfps"
           help="@adv.showfps.help"
           type="action"
           returns="void"
           category="debug"
           helpURL="flow-debug"
           deprecated="true">
        <fields>
            <dropdown order="0" id="showHide" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="toggle-flxcont"
           code="${deprecated}"
           spec="@adv.flxcont"
           help="@adv.flxcont.help"
           type="action"
           returns="void"
           category="debug"
           helpURL="flow-advanced"
           deprecated="true">
        <fields>
            <dropdown order="0" id="enableDisable" />
        </fields>
    </block>

    <block tag="toggle-flxpause"
           code="${deprecated}"
           spec="@adv.flxpause"
           help="@adv.flxpause.help"
           type="action"
           returns="void"
           category="debug"
           helpURL="flow-advanced"
           deprecated="true">
        <fields>
            <dropdown order="0" id="enableDisable" />
        </fields>
    </block>

    <block tag="is-iphone-ipad"
           code="${deprecated}"
           spec="@adv.isiphoneipad"
           help="@adv.isiphoneipad.help"
           type="normal"
           returns="boolean"
           category="debug"
           helpURL="flow-advanced"
           deprecated="true">
        <fields>
            <dropdown order="0" id="iPhoneiPad" />
        </fields>
    </block>

    <block tag="is-device"
           code="#if(ios) #{0} #else false #end"
           spec="@adv.isplatform"
           help="@adv.isplatform.help"
           type="normal"
           returns="boolean"
           category="debug"
           helpURL="flow-advanced"
           deprecated="true">
        <fields>
            <dropdown order="0" id="allDevices" />
        </fields>
    </block>

    <block tag="get-xy"
           code="#{0}.get#{1}()"
           spec="@sactor.xy"
           help="@sactor.xy.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-position">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="xyCenterScreen" />
        </fields>
    </block>

    <block tag="getdir"
           code="(Utils.DEG * #{0}.getAngle())"
           spec="@sactor.angle"
           help="@sactor.angle.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-position">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="isonscreen"
           code="#{0}.isOnScreen()"
           spec="@sactor.isonscreen"
           help="@sactor.isonscreen.help"
           type="normal"
           returns="boolean"
           category="actors"
           helpURL="actor-position">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="set-xy"
           code="#{0}.set#{1}(#{2});"
           spec="@sactor.setxy"
           help="@sactor.setxy.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-position">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="xyCenterScreen" />
            <number order="2" />
        </fields>
    </block>

    <block tag="setangle"
           code="#{0}.setAngle(Utils.RAD * (#{1}));"
           spec="@sactor.setangle"
           help="@sactor.setangle.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-position">
        <fields>
            <actor order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="rotate"
           code="#{0}.rotate(Utils.RAD * (#{1}));"
           spec="@sactor.rotate"
           help="@sactor.rotate.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-position">
        <fields>
            <actor order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="rotate2"
           code="#{0}.rotate(-Utils.RAD * (#{1}));"
           spec="@sactor.rotate2"
           help="@sactor.rotate2.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-position">
        <fields>
            <actor order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="get-dxy"
           code="#{0}.get#{1}()"
           spec="@sactor.dxy"
           help="@sactor.dxy.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-motion">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="xyVelocity" />
        </fields>
    </block>

    <block tag="set-dxy"
           code="#{0}.set#{1}(#{2});"
           spec="@sactor.setdxy"
           help="@sactor.setdxy.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-motion">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="xyVelocity" />
            <number order="2" />
        </fields>
    </block>

    <block tag="setvel"
           code="#{0}.setVelocity(#{1}, #{2});"
           spec="@sactor.setvel"
           help="@sactor.setvel.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-motion">
        <fields>
            <actor order="0" />
            <number order="1" />
            <number order="2" />
        </fields>
    </block>

    <block tag="push-shove"
           code="#{0}.#{1}(#{2}, #{3}, #{4});"
           spec="@sactor.pushshove"
           help="@sactor.pushshove.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-motion">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="pushShove" />
            <number order="2" />
            <number order="3" />
            <number order="4" />
        </fields>
    </block>

    <block tag="push-shove2"
           code="#{0}.#{1}InDirection(#{2}, #{3});"
           spec="@sactor.pushshove2"
           help="@sactor.pushshove2.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-motion">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="pushShove" />
            <number order="2" />
            <number order="3" />
        </fields>
    </block>

    <block tag="twist"
           code="#{0}.applyTorque(Utils.RAD * (#{1}));"
           spec="@sactor.torque"
           help="@sactor.torque.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-motion">
        <fields>
            <actor order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="getangvel"
           code="Utils.DEG * (#{0}.getAngularVelocity())"
           spec="@sactor.av"
           help="@sactor.av.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-motion">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="setav"
           code="#{0}.setAngularVelocity(Utils.RAD * (#{1}));"
           spec="@sactor.setav"
           help="@sactor.setav.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-motion">
        <fields>
            <actor order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="toggle-grav"
           code="#{0}.setIgnoreGravity(!#{1});"
           spec="@sactor.togglegrav"
           help="@sactor.togglegrav.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-motion">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="enableDisableTF" />
        </fields>
    </block>

    <block tag="toggle-rot"
           code="#{0}.#{1}Rotation();"
           spec="@sactor.togglerot"
           help="@sactor.togglerot.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-motion">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="enableDisable" />
        </fields>
    </block>

    <block tag="set-fric-bounce"
           code="#{0}.set#{1}(#{2});"
           spec="@sactor.setfricbounce"
           help="@sactor.setfricbounce.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-motion">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="physics" />
            <number order="2" />
        </fields>
    </block>

    <block tag="get-fric-bounce"
           code="#{0}.get#{1}()"
           spec="@sactor.getfricbounce"
           help="@sactor.getfricbounce.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-motion">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="physics" />
        </fields>
    </block>

    <block tag="die"
           code="recycleActor(#{0});"
           spec="@sactor.die"
           help="@sactor.die.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props">
        <fields>
            <actor order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="isalive"
           code="#{0}.isAlive()"
           spec="@sactor.isalive"
           help="@sactor.isalive.help"
           type="normal"
           returns="boolean"
           category="actors"
           helpURL="actor-props">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="kill-leave-screen"
           code="#{0}.killSelfAfterLeavingScreen();"
           spec="@sactor.killleavescreen"
           help="@sactor.killleavescreen.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="get-wh"
           code="(#{0}.get#{1})"
           spec="@sactor.widthheight"
           help="@sactor.widthheight.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-props">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="widthHeightHalf" />
        </fields>
    </block>

    <block tag="getatype"
           code="#{0}.getType()"
           spec="@sactor.atype"
           help="@sactor.atype.help"
           type="normal"
           returns="actortype"
           category="actors"
           helpURL="actor-props">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="getgroup"
           code="#{0}.getGroup()"
           spec="@sactor.group"
           help="@sactor.group.help"
           type="normal"
           returns="actorgroup"
           category="actors"
           helpURL="actor-props">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="setgroup"
           code="#{0}.setGroup(getActorGroup(#{1})); //NOT IMPLEMENTED"
           spec="@sactor.setgroup"
           help="@sactor.setgroup.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props">
        <fields>
            <actor order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="pick-type"
           code="#{0}"
           spec="@sactor.picktype"
           help="@sactor.picktype.help"
           type="normal"
           returns="actortype"
           category="actors"
           helpURL="actor-props">
        <fields>
            <actortype order="0" />
        </fields>
    </block>

    <block tag="pick-group"
           code="getActorGroup(#{0})"
           spec="@sactor.pickgroup"
           help="@sactor.pickgroup.help"
           type="normal"
           returns="actorgroup"
           category="actors"
           helpURL="actor-props">
        <fields>
            <dropdown order="0">
                <choices supplier="actorgroups" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="pick-type-by-name"
           code="getActorTypeByName(#{0})"
           spec="@sactor.picktypebyname"
           help="@sactor.picktypebyname.help"
           type="normal"
           returns="actortype"
           category="actors"
           helpURL="actor-props">
        <fields>
            <text order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="group-setresponse"
           code="Collision.addResponse(#{0}, #{1}, #{2});"
           spec="@sactor.setresponse"
           help="@sactor.setresponse.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props">
        <fields>
            <actorgroup order="0" />
            <actorgroup order="1" />
            <dropdown order="2" id="responseType" />
        </fields>
    </block>

    <block tag="ignore-screen-tolerance2"
           code="#{0}.make#{1}Simulate();"
           spec="@sactor.ignoretolerance2"
           help="@sactor.ignoretolerance2.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="alwaysSometimes" />
        </fields>
    </block>

    <block tag="bullet-mode2"
           code="makeActor#{1}ThroughTerrain(#{0});"
           spec="@sactor.bullet2"
           help="@sactor.bullet2.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="passOrNot" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="addshape-rectangle"
           code="#{0}.addRectangularShape(#{1}, #{2}, #{3}, #{4});"
           spec="@sactor.addshape.rectangle"
           help="@sactor.addshape.rectangle.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props">
        <fields>
            <actor order="0" />
            <number order="1" />
            <number order="2" />
            <number order="3" />
            <number order="4" />
        </fields>
    </block>

    <block tag="addshape-circle"
           code="#{0}.addCircularShape(#{1}, #{2}, #{3});"
           spec="@sactor.addshape.circle"
           help="@sactor.addshape.circle.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props">
        <fields>
            <actor order="0" />
            <number order="1" />
            <number order="2" />
            <number order="3" />
        </fields>
    </block>

    <block tag="addshape-polygon"
           code="var polygonActor:Actor = #{0};&#10;var vertices:Array&lt;B2Vec2&gt; = new Array&lt;B2Vec2&gt;();&#10;#{1}&#10;polygonActor.addPolygonalShape(vertices);"
           spec="@sactor.addshape.polygon"
           help="@sactor.addshape.polygon.help"
           type="wrapper"
           returns="void"
           category="actors"
           helpURL="actor-props">
        <fields>
            <actor order="0" />
            <code-block order="1" />
        </fields>
        <context>
            <innerContext type="has" value="polygonActor:com.stencyl.models.Actor" />
            <innerContext type="has" value="vertices:Array&lt;box2D.common.math.B2Vec2&gt;" />
        </context>
    </block>

    <block tag="addshape-vertex"
           code="polygonActor.addVertex(vertices, #{0}, #{1});"
           spec="@sactor.addshape.vertex"
           help="@sactor.addshape.vertex.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="has" value="polygonActor:com.stencyl.models.Actor" />
            <requiredContext type="has" value="vertices:Array&lt;box2D.common.math.B2Vec2&gt;" />
        </context>
    </block>

    <block tag="foreach-shape-fixture"
           code="fixture"
           spec="@sactor.foreach.shape.item"
           help="@sactor.foreach.shape.item.help"
           type="normal"
           returns="collision-shape"
           category="actors"
           hidden="true"
           helpURL="actor-props">
        <context>
            <requiredContext type="has" value="fixture:box2D.dynamics.B2Fixture" />
        </context>
    </block>

    <block tag="foreach-shape"
           code="var shapeActor:Actor = #{0};&#10;if (shapeActor.physicsMode == 0)&#10;{&#10;var fixture:B2Fixture = shapeActor.getBody().getFixtureList();&#10;while (fixture != null)&#10;{&#10;#{1}&#10;fixture = fixture.getNext();&#10;}&#10;}"
           spec="@sactor.foreach.shape2"
           help="@sactor.foreach.shape2.help"
           type="wrapper"
           returns="void"
           category="flow"
           helpURL="actor-props">
        <fields>
            <actor order="0" />
            <code-block order="1" />
            <attached-block order="2" tag="foreach-shape-fixture" />
        </fields>
        <context>
            <innerContext type="has" value="fixture:box2D.dynamics.B2Fixture" />
            <innerContext type="keyword" value="break" />
            <innerContext type="keyword" value="continue" />
        </context>
    </block>

    <block tag="shape-sensorsolid2"
           code="#{1}.setSensor(#{0});"
           spec="@sactor.shape.sensorsolid2"
           help="@sactor.shape.sensorsolid2.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props">
        <fields>
            <dropdown order="0" id="sensorSolid" />
            <collision-shape order="1" />
        </fields>
    </block>

    <block tag="shape-destroy2"
           code="#{0}.getBody().DestroyFixture(#{0});"
           spec="@sactor.shape.destroy2"
           help="@sactor.shape.destroy2.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props">
        <fields>
            <collision-shape order="0" />
        </fields>
    </block>

    <block tag="shape-scale2"
           code="Actor.scaleShape(#{1}.getShape(), #{1}.getBody().getLocalCenter(), #{0} / 100);"
           spec="@sactor.shape.scale2"
           help="@sactor.shape.scale2.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props">
        <fields>
            <number order="0" />
            <collision-shape order="1" />
        </fields>
    </block>

    <block tag="shape-group"
           code="engine.getGroup(#{0}.groupID, #{0}.getUserData())"
           spec="@sactor.shape.group"
           help="@sactor.shape.group.help"
           type="normal"
           returns="actorgroup"
           category="actors"
           helpURL="actor-props">
        <fields>
            <collision-shape order="0" />
        </fields>
    </block>

    <block tag="shape-setgroup"
           code="#{0}.groupID = #{1}.ID;"
           spec="@sactor.shape.setgroup"
           help="@sactor.shape.setgroup.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props">
        <fields>
            <collision-shape order="0" />
            <actorgroup order="1" />
        </fields>
    </block>

    <block tag="shape-last-added"
           code="#{0}.getLastCreatedFixture()"
           spec="@sactor.shape.last"
           help="@sactor.shape.last.help"
           type="normal"
           returns="collision-shape"
           category="actors"
           helpURL="actor-props">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="actor-set-prop"
           code="#{0}.setActorValue(#{1}, #{2});"
           spec="@sactor.setprop"
           help="@sactor.setprop.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props">
        <fields>
            <actor order="0" />
            <text order="1" />
            <anything order="2" />
        </fields>
    </block>

    <block tag="actor-get-prop"
           code="#{0}.getActorValue(#{1})"
           spec="@sactor.getprop"
           help="@sactor.getprop.help"
           type="normal"
           returns="anything"
           category="actors"
           helpURL="actor-props">
        <fields>
            <actor order="0" />
            <text order="1" />
        </fields>
    </block>

    <block tag="getanim"
           code="#{0}.getAnimation()"
           spec="@sactor.anim"
           help="@sactor.anim.help"
           type="normal"
           returns="animation"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="is-anim"
           code="#{0}.isAnimationPlaying()"
           spec="@sactor.isanim"
           help="@sactor.isanim.help"
           type="normal"
           returns="boolean"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="setanim"
           code="#{0}.setAnimation(#{1});"
           spec="@sactor.setanim"
           help="@sactor.setanim.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
            <animation order="1" />
        </fields>
    </block>

    <block tag="set-frame"
           code="#{0}.setCurrentFrame(#{1});"
           spec="@sactor.setframe"
           help="@sactor.setframe.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
            <int order="1" />
        </fields>
    </block>

    <block tag="get-frame"
           code="#{0}.getCurrentFrame()"
           spec="@sactor.getframe"
           help="@sactor.getframe.help"
           type="normal"
           returns="int"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="get-num-frames"
           code="#{0}.getNumFrames()"
           spec="@sactor.getnumframes"
           help="@sactor.getnumframes.help"
           type="normal"
           returns="int"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="get-frame-duration"
           code="#{0}.currAnimation.getFrameDurations()[#{1}]"
           spec="@sactor.getframeduration"
           help="@sactor.getframeduration.help"
           type="normal"
           returns="int"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
            <int order="1" />
        </fields>
    </block>

    <block tag="set-frame-duration"
           code="#{0}.currAnimation.setFrameDuration(#{1}, #{2});"
           spec="@sactor.setframeduration"
           help="@sactor.setframeduration.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
            <int order="1" />
            <int order="2" />
        </fields>
    </block>

    <block tag="getlayer"
           code="#{0}.getLayerID()"
           spec="@sactor.layer"
           help="@sactor.layer.help"
           type="normal"
           returns="int"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="getlayername"
           code="#{0}.getLayerName()"
           spec="@sactor.layername"
           help="@sactor.layername.help"
           type="normal"
           returns="text"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="setlayer2"
           code="#{0}.moveToLayer(#{1:layerRef});"
           spec="@sactor.setlayer2"
           help="@sactor.setlayer2.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="layerIDs" />
            <anything order="2" />
        </fields>
    </block>

    <block tag="backforward"
           code="#{0}.#{1}();"
           spec="@sactor.backforward"
           help="@sactor.backforward.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="backForward" />
        </fields>
    </block>

    <block tag="movewithinlayer"
           code="#{0}.move#{1}();"
           spec="@sactor.movewithinlayer"
           help="@sactor.movewithinlayer.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="moveWithinLayer" />
        </fields>
    </block>

    <block tag="zindex"
           code="#{0}.getZIndex()"
           spec="@sactor.zindex"
           help="@sactor.zindex.help"
           type="normal"
           returns="int"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="setzindex"
           code="#{0}.setZIndex(#{1});"
           spec="@sactor.setzindex"
           help="@sactor.setzindex.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
            <int order="1" />
        </fields>
    </block>

    <block tag="actorswithinlayer2"
           code="engine.getNumberOfActorsWithinLayer(#{0:layerRef})"
           spec="@sactor.actorswithinlayer2"
           help="@sactor.actorswithinlayer2.help"
           type="normal"
           returns="int"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <dropdown order="0" id="layerIDs" />
            <anything order="1" />
        </fields>
        <context>
            <requiredContext type="has" value="engine:com.stencyl.Engine" />
        </context>
    </block>

    <block tag="toggle-image"
           code="#{0}.#{1}ActorDrawing();"
           spec="@sactor.toggleimage"
           help="@sactor.toggleimage.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="showHideEnableDisable" />
        </fields>
    </block>

    <block tag="set-opacity"
           code="#{0}.alpha = #{1} / 100;"
           spec="@sactor.alpha.set"
           help="@sactor.alpha.set.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="get-opacity"
           code="(#{0}.alpha * 100)"
           spec="@sactor.alpha.get"
           help="@sactor.alpha.get.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="anchor-screen"
           code="#{0}.anchorToScreen();"
           spec="@sactor.anchortoscreen"
           help="@sactor.anchortoscreen.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="unanchor-screen"
           code="#{0}.unanchorFromScreen();"
           spec="@sactor.anchorfromscreen"
           help="@sactor.anchorfromscreen.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-draw">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="moveToBy"
           code="#{0}.move#{1}(#{2}, #{3}, #{4}, #{5});"
           spec="@sactor.movetoby"
           help="@sactor.movetoby.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-tween">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="byTo" />
            <number order="2" />
            <number order="3" />
            <number order="4" />
            <dropdown order="5" id="easing" />
        </fields>
    </block>

    <block tag="spinToBy"
           code="#{0}.spin#{1}(#{2}, #{3}, #{4});"
           spec="@sactor.spintoby"
           help="@sactor.spintoby.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-tween">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="byTo" />
            <number order="2" />
            <number order="3" />
            <dropdown order="4" id="easing" />
        </fields>
    </block>

    <block tag="fadeInOut"
           code="#{0}.fadeTo(#{1}, #{2}, #{3});"
           spec="@sactor.fadeinout"
           help="@sactor.fadeinout.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-tween">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="inOut" />
            <number order="2" />
            <dropdown order="3" id="easing" />
        </fields>
    </block>

    <block tag="fadeTo"
           code="#{0}.fadeTo(#{1} / 100, #{2}, #{3});"
           spec="@sactor.fadeto"
           help="@sactor.fadeto.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-tween">
        <fields>
            <actor order="0" />
            <number order="1" />
            <number order="2" />
            <dropdown order="3" id="easing" />
        </fields>
    </block>

    <block tag="scaleTo"
           code="#{0}.growTo(#{1}/100, #{2}/100, #{3}, #{4});"
           spec="@sactor.scaleto"
           help="@sactor.scaleto.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-tween">
        <fields>
            <actor order="0" />
            <number order="1" />
            <number order="2" />
            <number order="3" />
            <dropdown order="4" id="easing" />
        </fields>
    </block>

    <block tag="set-blend-actor"
           code="#{0}.setBlendMode(#{1});"
           spec="@draw.filter.blend.actor"
           help="@draw.filter.blend.actor.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-fx">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="blend" />
        </fields>
    </block>

    <block tag="apply-filter"
           code="#{0}.setFilter([#{1}]);"
           spec="@sactor.filter"
           help="@sactor.filter.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-fx">
        <fields>
            <actor order="0" />
            <filter order="1" />
        </fields>
    </block>

    <block tag="clear-filter"
           code="#{0}.clearFilters();"
           spec="@sactor.clearfilter"
           help="@sactor.clearfilter.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-fx">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="filter-tint"
           code="createTintFilter(#{0}, #{1}/100)"
           spec="@draw.filter.tint"
           help="@draw.filter.tint.help"
           type="normal"
           returns="filter"
           category="actors"
           helpURL="actor-fx">
        <fields>
            <color order="0" />
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="filter-hsb"
           code="createHueFilter(#{0})"
           spec="@draw.filter.hsb"
           help="@draw.filter.hsb.help"
           type="normal"
           returns="filter"
           category="actors"
           helpURL="actor-fx">
        <fields>
            <number order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="filter-sat"
           code="createSaturationFilter(#{0})"
           spec="@draw.filter.sat"
           help="@draw.filter.sat.help"
           type="normal"
           returns="filter"
           category="actors"
           helpURL="actor-fx">
        <fields>
            <number order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="filter-bright"
           code="createBrightnessFilter(#{0})"
           spec="@draw.filter.bright"
           help="@draw.filter.bright.help"
           type="normal"
           returns="filter"
           category="actors"
           helpURL="actor-fx">
        <fields>
            <number order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="filter-grayscale"
           code="createGrayscaleFilter()"
           spec="@draw.filter.grayscale"
           help="@draw.filter.grayscale.help"
           type="normal"
           returns="filter"
           category="actors"
           helpURL="actor-fx">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="filter-negative"
           code="createNegativeFilter()"
           spec="@draw.filter.negative"
           help="@draw.filter.negative.help"
           type="normal"
           returns="filter"
           category="actors"
           helpURL="actor-fx">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="filter-sepia"
           code="createSepiaFilter()"
           spec="@draw.filter.sepia"
           help="@draw.filter.sepia.help"
           type="normal"
           returns="filter"
           category="actors"
           helpURL="actor-fx">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="recycle"
           code="recycleActor(#{0});"
           spec="@sactor.recycle"
           help="@sactor.recycle.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="ignoregrav"
           code="#{0}.ignoresGravity()"
           spec="@sactor.ignoregrav"
           help="@sactor.ignoregrav.help"
           type="normal"
           returns="boolean"
           category="actors"
           helpURL="actor-motion"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="getx"
           code="#{0}.getX()"
           spec="@sactor.x"
           help="@sactor.x.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-position"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="gety"
           code="#{0}.getY()"
           spec="@sactor.y"
           help="@sactor.y.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-position"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="getxc"
           code="#{0}.getXCenter()"
           spec="@sactor.xc"
           help="@sactor.xc.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-position"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="getyc"
           code="#{0}.getYCenter()"
           spec="@sactor.yc"
           help="@sactor.yc.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-position"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="getsx"
           code="#{0}.getScreenX()"
           spec="@sactor.sx"
           help="@sactor.sx.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-position"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="getsy"
           code="#{0}.getScreenY()"
           spec="@sactor.sy"
           help="@sactor.sy.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-position"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="getdx"
           code="#{0}.getXVelocity()"
           spec="@sactor.dx"
           help="@sactor.dx.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-motion"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="getdy"
           code="#{0}.getYVelocity()"
           spec="@sactor.dy"
           help="@sactor.dy.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-motion"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="getwidth"
           code="#{0}.getWidth()"
           spec="@sactor.width"
           help="@sactor.width.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-props"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="getheight"
           code="#{0}.getHeight()"
           spec="@sactor.height"
           help="@sactor.height.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-props"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="gethwidth"
           code="(#{0}.getWidth()/2)"
           spec="@sactor.hwidth"
           help="@sactor.hwidth.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-props"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="gethheight"
           code="(#{0}.getHeight()/2)"
           spec="@sactor.hheight"
           help="@sactor.hheight.help"
           type="normal"
           returns="number"
           category="actors"
           helpURL="actor-props"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="setlayer"
           code="#{0}.moveToLayer(#{1});"
           spec="@sactor.setlayer"
           help="@sactor.setlayer.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-draw"
           deprecated="true">
        <fields>
            <actor order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="actorswithinlayer"
           code="engine.getNumberOfActorsWithinLayer(#{0})"
           spec="@sactor.actorswithinlayer"
           help="@sactor.actorswithinlayer.help"
           type="normal"
           returns="int"
           category="actors"
           helpURL="actor-draw"
           deprecated="true">
        <fields>
            <number order="0" />
        </fields>
        <context>
            <requiredContext type="has" value="engine:com.stencyl.Engine" />
        </context>
    </block>

    <block tag="setx"
           code="#{0}.setX(#{1});"
           spec="@sactor.setx"
           help="@sactor.setx.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-position"
           deprecated="true">
        <fields>
            <actor order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="sety"
           code="#{0}.setY(#{1});"
           spec="@sactor.sety"
           help="@sactor.sety.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-position"
           deprecated="true">
        <fields>
            <actor order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="setdx"
           code="#{0}.setXVelocity(#{1});"
           spec="@sactor.setdx"
           help="@sactor.setdx.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-motion"
           deprecated="true">
        <fields>
            <actor order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="setdy"
           code="#{0}.setYVelocity(#{1});"
           spec="@sactor.setdy"
           help="@sactor.setdy.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-motion"
           deprecated="true">
        <fields>
            <actor order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="changeav"
           code="#{0}.changeAngularVelocity(Utils.RAD * (#{1}));"
           spec="@sactor.changeav"
           help="@sactor.changeav.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-motion"
           deprecated="true">
        <fields>
            <actor order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="backone"
           code="#{0}.sendBackward();"
           spec="@sactor.backone"
           help="@sactor.backone.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-draw"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="forwardone"
           code="#{0}.bringForward();"
           spec="@sactor.forwardone"
           help="@sactor.forwardone.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-draw"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="toback"
           code="#{0}.sendToBack();"
           spec="@sactor.toback"
           help="@sactor.toback.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-draw"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="tofront"
           code="#{0}.bringToFront();"
           spec="@sactor.tofront"
           help="@sactor.tofront.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-draw"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="setcamanchor"
           code="${deprecated}"
           spec="@sactor.setcamanchor"
           help="@sactor.setcamanchor.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-draw"
           deprecated="true">
        <fields>
            <actor order="0" />
            <number order="1" />
            <number order="2" />
        </fields>
    </block>

    <block tag="actor-is-paused"
           code="#{0}.isPaused()"
           spec="@sactor.ispaused"
           help="@sactor.ispaused.help"
           type="normal"
           returns="boolean"
           category="actors"
           helpURL="null"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="set-friction"
           code="#{0}.getBody().setFriction(#{1});"
           spec="@sactor.setfriction"
           help="@sactor.setfriction.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-motion"
           deprecated="true">
        <fields>
            <actor order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="set-bounciness"
           code="#{0}.getBody().setBounciness(#{1});"
           spec="@sactor.setbounciness"
           help="@sactor.setbounciness.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-motion"
           deprecated="true">
        <fields>
            <actor order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="moveTo"
           code="#{0}.moveTo(#{1}, #{2}, #{3}, #{4});"
           spec="@sactor.moveto"
           help="@sactor.moveto.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-tween"
           deprecated="true">
        <fields>
            <actor order="0" />
            <number order="1" />
            <number order="2" />
            <number order="3" />
            <dropdown order="4" id="easing" />
        </fields>
    </block>

    <block tag="moveBy"
           code="#{0}.moveBy(#{1}, #{2}, #{3}, #{4});"
           spec="@sactor.moveby"
           help="@sactor.moveby.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-tween"
           deprecated="true">
        <fields>
            <actor order="0" />
            <number order="1" />
            <number order="2" />
            <number order="3" />
            <dropdown order="4" id="easing" />
        </fields>
    </block>

    <block tag="spinTo"
           code="#{0}.spinTo(#{1}, #{2}, #{3});"
           spec="@sactor.spinto"
           help="@sactor.spinto.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-tween"
           deprecated="true">
        <fields>
            <actor order="0" />
            <number order="1" />
            <number order="2" />
            <dropdown order="3" id="easing" />
        </fields>
    </block>

    <block tag="spinBy"
           code="#{0}.spinBy(#{1}, #{2}, #{3});"
           spec="@sactor.spinby"
           help="@sactor.spinby.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-tween"
           deprecated="true">
        <fields>
            <actor order="0" />
            <number order="1" />
            <number order="2" />
            <dropdown order="3" id="easing" />
        </fields>
    </block>

    <block tag="fadeIn"
           code="#{0}.fadeTo(1, #{1}, #{2});"
           spec="@sactor.fadein"
           help="@sactor.fadein.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-tween"
           deprecated="true">
        <fields>
            <actor order="0" />
            <number order="1" />
            <dropdown order="2" id="easing" />
        </fields>
    </block>

    <block tag="fadeOut"
           code="#{0}.fadeTo(0, #{1}, #{2});"
           spec="@sactor.fadeout"
           help="@sactor.fadeout.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-tween"
           deprecated="true">
        <fields>
            <actor order="0" />
            <number order="1" />
            <dropdown order="2" id="easing" />
        </fields>
    </block>

    <block tag="filter-tint2"
           code="createTintFilter(#{0}, #{1}/100)"
           spec="@draw.filter.tint"
           help="@draw.filter.tint.help"
           type="normal"
           returns="filter"
           category="actors"
           helpURL="actor-fx"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:color" />
            </dropdown>
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="string-to-anim"
           code="(&quot;&quot; + #{0})"
           spec="@sactor.stringtoanim"
           help="@sactor.stringtoanim.help"
           type="normal"
           returns="animation"
           category="actors"
           helpURL="actor-draw"
           deprecated="true">
        <fields>
            <anything order="0" />
        </fields>
    </block>

    <block tag="ignore-screen-tolerance"
           code="#{0}.makeAlwaysSimulate();"
           spec="@sactor.ignoretolerance"
           help="@sactor.ignoretolerance.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="bullet-mode"
           code="makeActorNotPassThroughTerrain(#{0});"
           spec="@sactor.bullet"
           help="@sactor.bullet.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props"
           deprecated="true">
        <fields>
            <actor order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="shape-sensorsolid"
           code="fixture.setSensor(#{0});"
           spec="@sactor.shape.sensorsolid"
           help="@sactor.shape.sensorsolid.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props"
           deprecated="true">
        <fields>
            <dropdown order="0" id="sensorSolid" />
        </fields>
        <context>
            <requiredContext type="has" value="fixture:box2D.dynamics.B2Fixture" />
        </context>
    </block>

    <block tag="shape-destroy"
           code="body.DestroyFixture(fixture);"
           spec="@sactor.shape.destroy"
           help="@sactor.shape.destroy.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props"
           deprecated="true">
        <context>
            <requiredContext type="has" value="body:box2D.dynamics.B2Body" />
            <requiredContext type="has" value="fixture:box2D.dynamics.B2Fixture" />
        </context>
    </block>

    <block tag="shape-scale"
           code="Actor.scaleShape(fixture.getShape(), body.getLocalCenter(), #{0} / 100);"
           spec="@sactor.shape.scale"
           help="@sactor.shape.scale.help"
           type="action"
           returns="void"
           category="actors"
           helpURL="actor-props"
           deprecated="true">
        <fields>
            <number order="0" />
        </fields>
        <context>
            <requiredContext type="has" value="body:box2D.dynamics.B2Body" />
            <requiredContext type="has" value="fixture:box2D.dynamics.B2Fixture" />
        </context>
    </block>

    <block tag="create-actor3"
           code="createRecycledActor(#{0}, #{1}, #{2}, #{3});"
           spec="@scene.createactor"
           help="@scene.createactor.help"
           type="action"
           returns="actor"
           category="scene"
           helpURL="scene-actors">
        <fields>
            <actortype order="0" />
            <number order="1" />
            <number order="2" />
            <dropdown order="3" id="layers" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="create-actor-on-layer"
           code="createRecycledActorOnLayer(#{0}, #{1}, #{2}, #{3:layerRef});"
           spec="@scene.createactoronlayer"
           help="@scene.createactoronlayer.help"
           type="action"
           returns="actor"
           category="scene"
           helpURL="scene-actors">
        <fields>
            <actortype order="0" />
            <number order="1" />
            <number order="2" />
            <dropdown order="3" id="layerIDs" />
            <anything order="4" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="actor"
           code="#{0}"
           spec="@scene.actor"
           help="@scene.actor.help"
           type="normal"
           returns="actor"
           category="scene"
           helpURL="scene-actors">
        <fields>
            <actor order="0" />
        </fields>
    </block>

    <block tag="actor-on-screen"
           code="actorOnScreen"
           spec="@scene.screenactor.foreach.actor"
           help="@scene.screenactor.foreach.actor.help"
           type="normal"
           returns="actor"
           category="scene"
           hidden="true"
           helpURL="scene-actors">
        <context>
            <requiredContext type="has" value="actorOnScreen:com.stencyl.models.Actor" />
        </context>
    </block>

    <block tag="actors-on-screen"
           code="engine.allActors.reuseIterator = false;&#10;for(actorOnScreen in engine.allActors)&#10;{&#10;if(actorOnScreen != null &amp;&amp; !actorOnScreen.dead &amp;&amp; !actorOnScreen.recycled &amp;&amp; actorOnScreen.isOnScreenCache)&#10;{&#10;#{0}&#10;}&#10;}&#10;engine.allActors.reuseIterator = true;"
           spec="@scene.screenactor.foreach"
           help="@scene.screenactor.foreach.help"
           type="wrapper"
           returns="void"
           category="flow"
           helpURL="scene-actors"
           isLoop="true">
        <fields>
            <code-block order="0" />
            <attached-block order="1" tag="actor-on-screen" />
        </fields>
        <context>
            <innerContext type="has" value="actorOnScreen:com.stencyl.models.Actor" />
            <innerContext type="keyword" value="break" />
            <innerContext type="keyword" value="continue" />
            <requiredContext type="has" value="engine:com.stencyl.Engine" />
        </context>
    </block>

    <block tag="actor-in-region"
           code="actorInRegion"
           spec="@scene.region.foreach.actor"
           help="@scene.region.foreach.actor.help"
           type="normal"
           returns="actor"
           category="scene"
           hidden="true"
           helpURL="scene-actors">
        <context>
            <requiredContext type="has" value="actorInRegion:com.stencyl.models.Actor" />
        </context>
    </block>

    <block tag="actors-in-region"
           code="for(actorInRegion in getActorsInRegion(#{0}))&#10;{&#10;if(actorInRegion != null &amp;&amp; !actorInRegion.dead){&#10;#{1}&#10;}&#10;}"
           spec="@scene.region.foreach"
           help="@scene.region.foreach.help"
           type="wrapper"
           returns="void"
           category="flow"
           helpURL="scene-actors"
           isLoop="true">
        <fields>
            <region order="0" />
            <code-block order="1" />
            <attached-block order="2" tag="actor-in-region" />
        </fields>
        <context>
            <innerContext type="has" value="actorInRegion:com.stencyl.models.Actor" />
            <innerContext type="keyword" value="break" />
            <innerContext type="keyword" value="continue" />
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="actor-of-type"
           code="actorOfType"
           spec="@scene.actor.foreach.actor"
           help="@scene.actor.foreach.actor.help"
           type="normal"
           returns="actor"
           category="scene"
           hidden="true"
           helpURL="scene-actors">
        <context>
            <requiredContext type="has" value="actorOfType:com.stencyl.models.Actor" />
        </context>
    </block>

    <block tag="actors-of-type3"
           code="for(actorOfType in getActorsOfType(#{0}))&#10;{&#10;if(actorOfType != null &amp;&amp; !actorOfType.dead &amp;&amp; !actorOfType.recycled){&#10;#{1}&#10;}&#10;}"
           spec="@scene.actor.foreach"
           help="@scene.actor.foreach.help"
           type="wrapper"
           returns="void"
           category="flow"
           helpURL="scene-actors"
           isLoop="true">
        <fields>
            <actortype order="0" />
            <code-block order="1" />
            <attached-block order="2" tag="actor-of-type" />
        </fields>
        <context>
            <innerContext type="has" value="actorOfType:com.stencyl.models.Actor" />
            <innerContext type="keyword" value="break" />
            <innerContext type="keyword" value="continue" />
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="actor-in-group"
           code="actorInGroup"
           spec="@scene.group.foreach.actor"
           help="@scene.group.foreach.actor.help"
           type="normal"
           returns="actor"
           category="scene"
           hidden="true"
           helpURL="scene-actors">
        <context>
            <requiredContext type="has" value="actorInGroup:com.stencyl.models.Actor" />
        </context>
    </block>

    <block tag="actors-in-group"
           code="for(actorInGroup in cast(#{0}, Group).list)&#10;{&#10;if(actorInGroup != null &amp;&amp; !actorInGroup.dead &amp;&amp; !actorInGroup.recycled){&#10;#{1}&#10;}&#10;}"
           spec="@scene.group.foreach"
           help="@scene.group.foreach.help"
           type="wrapper"
           returns="void"
           category="flow"
           helpURL="scene-actors"
           isLoop="true">
        <fields>
            <actorgroup order="0" />
            <code-block order="1" />
            <attached-block order="2" tag="actor-in-group" />
        </fields>
        <context>
            <innerContext type="has" value="actorInGroup:com.stencyl.models.Actor" />
            <innerContext type="keyword" value="break" />
            <innerContext type="keyword" value="continue" />
        </context>
    </block>

    <block tag="scene-change-color"
           code="switchScene(#{0}.getID(), #{1}(#{2}, #{3}), #{4}(#{5}, #{6}));"
           spec="@scene.change.color"
           help="@scene.change.color.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-flow">
        <fields>
            <scene order="0" />
            <dropdown order="1" id="outTransitions" />
            <number order="2" />
            <color order="3" />
            <dropdown order="4" id="inTransitions" />
            <number order="5" />
            <color order="6" />
        </fields>
        <defaults>
            <color r="0" g="0" b="0" id="3" />
            <color r="0" g="0" b="0" id="6" />
        </defaults>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="scene-change-through"
           code="switchScene(#{0}.getID(), null, #{1}(#{2}));"
           spec="@scene.change.through"
           help="@scene.change.through.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-flow">
        <fields>
            <scene order="0" />
            <dropdown order="1" id="throughTransitions" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="scene-reload-color"
           code="reloadCurrentScene(#{0}(#{1}, #{2}), #{3}(#{4}, #{5}));"
           spec="@scene.reload.color"
           help="@scene.reload.color.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-flow">
        <fields>
            <dropdown order="0" id="outTransitions" />
            <number order="1" />
            <color order="2" />
            <dropdown order="3" id="inTransitions" />
            <number order="4" />
            <color order="5" />
        </fields>
        <defaults>
            <color r="0" g="0" b="0" id="2" />
            <color r="0" g="0" b="0" id="5" />
        </defaults>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="scene-reload-through"
           code="reloadCurrentScene(null, #{0}(#{1}));"
           spec="@scene.reload.through"
           help="@scene.reload.through.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-flow">
        <fields>
            <dropdown order="0" id="throughTransitions" />
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="scenebyname"
           code="GameModel.get().scenes.get(getIDForScene(#{0}))"
           spec="@scene.getbyname"
           help="@scene.getbyname.help"
           type="normal"
           returns="scene"
           category="scene"
           helpURL="scene-flow">
        <fields>
            <text order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="is-transitioning"
           code="isTransitioning()"
           spec="@scene.istransition"
           help="@scene.istransition.help"
           type="normal"
           returns="boolean"
           category="scene"
           helpURL="scene-flow">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="create-actor3-next"
           code="createActorInNextScene(#{0}, #{1}, #{2}, #{3});"
           spec="@scene.createactor.next"
           help="@scene.createactor.next.help"
           type="action"
           returns="actor"
           category="scene"
           helpURL="scene-flow">
        <fields>
            <actortype order="0" />
            <number order="1" />
            <number order="2" />
            <dropdown order="3" id="layers" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="pause-unpause"
           code="engine.#{0}();"
           spec="@scene.pause"
           help="@scene.pause.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-flow">
        <fields>
            <dropdown order="0" id="pauseUnpause" />
        </fields>
        <context>
            <requiredContext type="has" value="engine:com.stencyl.Engine" />
        </context>
    </block>

    <block tag="is-paused"
           code="engine.isPaused()"
           spec="@scene.paused"
           help="@scene.paused.help"
           type="normal"
           returns="boolean"
           category="scene"
           helpURL="scene-flow">
        <context>
            <requiredContext type="has" value="engine:com.stencyl.Engine" />
        </context>
    </block>

    <block tag="region"
           code="#{0}"
           spec="@scene.region"
           help="@scene.region.help"
           type="normal"
           returns="region"
           category="scene"
           helpURL="scene-regions">
        <fields>
            <region order="0" />
        </fields>
    </block>

    <block tag="is-in-region"
           code="isInRegion(#{0}, #{1})"
           spec="@scene.isinregion"
           help="@scene.isinregion.help"
           type="normal"
           returns="boolean"
           category="scene"
           helpURL="scene-regions">
        <fields>
            <actor order="0" />
            <region order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="create-region"
           code="createBoxRegion(#{0}, #{1}, #{2}, #{3});"
           spec="@scene.creater"
           help="@scene.creater.help"
           type="action"
           returns="region"
           category="scene"
           helpURL="scene-regions">
        <fields>
            <number order="0" />
            <number order="1" />
            <number order="2" />
            <number order="3" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="create-circular-region"
           code="createCircularRegion(#{0}, #{1}, #{2});"
           spec="@scene.createcr"
           help="@scene.createcr.help"
           type="action"
           returns="region"
           category="scene"
           helpURL="scene-regions">
        <fields>
            <number order="0" />
            <number order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="delete-region"
           code="removeRegion(#{0}.getID());"
           spec="@scene.deleter"
           help="@scene.deleter.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-regions">
        <fields>
            <region order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="move-region"
           code="#{0}.setLocation(#{1}, #{2});"
           spec="@scene.mover"
           help="@scene.mover.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-regions">
        <fields>
            <region order="0" />
            <number order="1" />
            <number order="2" />
        </fields>
    </block>

    <block tag="follow-region"
           code="#{0}.follow(#{1});"
           spec="@scene.followr"
           help="@scene.followr.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-regions">
        <fields>
            <region order="0" />
            <actor order="1" />
        </fields>
    </block>

    <block tag="reset-region"
           code="#{0}.resetSize();"
           spec="@scene.region.reset"
           help="@scene.region.reset.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-regions">
        <fields>
            <region order="0" />
        </fields>
    </block>

    <block tag="resize-region1"
           code="#{0}.setRegionDiameter(#{1});"
           spec="@scene.region.setsize1"
           help="@scene.region.setsize1.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-regions">
        <fields>
            <region order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="resize-region2"
           code="#{0}.setRegionSize(#{1}, #{2});"
           spec="@scene.region.setsize2"
           help="@scene.region.setsize2.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-regions">
        <fields>
            <region order="0" />
            <number order="1" />
            <number order="2" />
        </fields>
    </block>

    <block tag="get-region-pos"
           code="#{0}.get#{1}()"
           spec="@scene.region.pos"
           help="@scene.region.pos.help"
           type="normal"
           returns="number"
           category="scene"
           helpURL="scene-regions">
        <fields>
            <region order="0" />
            <dropdown order="1" id="allPositions" />
        </fields>
    </block>

    <block tag="get-region-size"
           code="#{0}.get#{1}()"
           spec="@scene.region.size"
           help="@scene.region.size.help"
           type="normal"
           returns="number"
           category="scene"
           helpURL="scene-regions">
        <fields>
            <region order="0" />
            <dropdown order="1" id="widthHeight" />
        </fields>
    </block>

    <block tag="grav-xy"
           code="getGravity().#{0}"
           spec="@scene.gravxy"
           help="@scene.gravxy.help"
           type="normal"
           returns="number"
           category="scene"
           helpURL="scene-world">
        <fields>
            <dropdown order="0" id="grav" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="setgrav"
           code="setGravity(#{0}, #{1});"
           spec="@scene.gravs"
           help="@scene.gravs.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-world">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="tile-wh"
           code="getTile#{0}()"
           spec="@scene.tilewh"
           help="@scene.tilewh.help"
           type="normal"
           returns="int"
           category="scene"
           helpURL="scene-world">
        <fields>
            <dropdown order="0" id="widthHeight" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="tile-coord-at"
           code="getTilePosition(#{0}, #{1})"
           spec="@scene.tile.coord"
           help="@scene.tile.coord.help"
           type="normal"
           returns="int"
           category="scene"
           helpURL="scene-world">
        <fields>
            <dropdown order="0" id="columnRow" />
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-tile-at2"
           code="setTileAt(#{0}, #{1}, #{2:layerRef}, #{4}, #{5});"
           spec="@scene.tile.set2"
           help="@scene.tile.set2.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-world">
        <fields>
            <int order="0" />
            <int order="1" />
            <dropdown order="2" id="layerIDs" />
            <anything order="3" />
            <int order="4" />
            <int order="5" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="tile-exists-at2"
           code="tileExistsAt(#{0}, #{1}, #{2:layerRef})"
           spec="@scene.tile.exists2"
           help="@scene.tile.exists2.help"
           type="normal"
           returns="boolean"
           category="scene"
           helpURL="scene-world">
        <fields>
            <int order="0" />
            <int order="1" />
            <dropdown order="2" id="layerIDs" />
            <anything order="3" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="tileID-at2"
           code="getTileIDAt(#{0}, #{1}, #{2:layerRef})"
           spec="@scene.tile.id2"
           help="@scene.tile.id2.help"
           type="normal"
           returns="int"
           category="scene"
           helpURL="scene-world">
        <fields>
            <int order="0" />
            <int order="1" />
            <dropdown order="2" id="layerIDs" />
            <anything order="3" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="tileCollisionAt2"
           code="tileCollisionAt(#{0}, #{1}, #{2:layerRef})"
           spec="@scene.tile.collision2"
           help="@scene.tile.collision2.help"
           type="normal"
           returns="boolean"
           category="scene"
           helpURL="scene-world">
        <fields>
            <int order="0" />
            <int order="1" />
            <dropdown order="2" id="layerIDs" />
            <anything order="3" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="tileColID-at2"
           code="getTileColIDAt(#{0}, #{1}, #{2:layerRef})"
           spec="@scene.tile.collisionid2"
           help="@scene.tile.collisionid2.help"
           type="normal"
           returns="int"
           category="scene"
           helpURL="scene-world">
        <fields>
            <int order="0" />
            <int order="1" />
            <dropdown order="2" id="layerIDs" />
            <anything order="3" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="tilesetID-at2"
           code="getTilesetIDAt(#{0}, #{1}, #{2:layerRef})"
           spec="@scene.tile.tsetid2"
           help="@scene.tile.tsetid2.help"
           type="normal"
           returns="int"
           category="scene"
           helpURL="scene-world">
        <fields>
            <int order="0" />
            <int order="1" />
            <dropdown order="2" id="layerIDs" />
            <anything order="3" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="remove-tile-at2"
           code="removeTileAt(#{0}, #{1}, #{2:layerRef});"
           spec="@scene.tile.remove2"
           help="@scene.tile.remove2.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-world">
        <fields>
            <int order="0" />
            <int order="1" />
            <dropdown order="2" id="layerIDs" />
            <anything order="3" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="tile-data-at2"
           code="getTileDataAt(#{0}, #{1}, #{2:layerRef})"
           spec="@scene.tile.data2"
           help="@scene.tile.data2.help"
           type="normal"
           returns="text"
           category="scene"
           helpURL="scene-world">
        <fields>
            <int order="0" />
            <int order="1" />
            <dropdown order="2" id="layerIDs" />
            <anything order="3" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="scene-wh"
           code="#{0}"
           spec="@scene.scenewh"
           help="@scene.scenewh.help"
           type="normal"
           returns="int"
           category="scene"
           helpURL="scene-world">
        <fields>
            <dropdown order="0" id="sceneWidthHeight" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="scenename"
           code="getCurrentSceneName()"
           spec="@scene.getname"
           help="@scene.getname.help"
           type="normal"
           returns="text"
           category="scene"
           helpURL="scene-world">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="screen-xy"
           code="getScreen#{0}()"
           spec="@scene.screenxy"
           help="@scene.screenxy.help"
           type="normal"
           returns="number"
           category="scene"
           helpURL="scene-view">
        <fields>
            <dropdown order="0" id="allPositions" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="safe-area-insets"
           code="Universal.#{0}Inset"
           spec="@scene.screen.insets"
           help="@scene.screen.insets.help"
           type="normal"
           returns="number"
           category="scene"
           helpURL="game-screen">
        <fields>
            <dropdown order="0" id="topBottomLeftRight" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="camera-move"
           code="engine.moveCamera(#{0}, #{1});"
           spec="@scene.cameramove"
           help="@scene.cameramove.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="has" value="engine:com.stencyl.Engine" />
        </context>
    </block>

    <block tag="camera-follow"
           code="engine.cameraFollow(#{0});"
           spec="@scene.camerafollow"
           help="@scene.camerafollow.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <fields>
            <actor order="0" />
        </fields>
        <context>
            <requiredContext type="has" value="engine:com.stencyl.Engine" />
        </context>
    </block>

    <block tag="shake-start"
           code="startShakingScreen(#{0} / 100, #{1});"
           spec="@scene.shake.start"
           help="@scene.shake.start.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="shake-stop"
           code="stopShakingScreen();"
           spec="@scene.shake.stop"
           help="@scene.shake.stop.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-color-bg"
           code="setColorBackground(#{0});"
           spec="@scene.setcolorbg"
           help="@scene.setcolorbg.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <fields>
            <color order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-grad-bg"
           code="setColorBackground(#{0}, #{1});"
           spec="@scene.setgradbg"
           help="@scene.setgradbg.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <fields>
            <color order="0" />
            <color order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="layer-exists"
           code="(#{0:layerRefNoFallback} != null)"
           spec="@scene.layerexists"
           help="@scene.layerexists.help"
           type="normal"
           returns="boolean"
           category="scene"
           helpURL="scene-view">
        <fields>
            <dropdown order="0" id="layerIDs" />
            <anything order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-bg-speed"
           code="setScrollSpeedForBackground(#{0:layerRef}, #{2}, #{3});"
           spec="@scene.setbgspeed"
           help="@scene.setbgspeed.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <fields>
            <dropdown order="0" id="layerIDs" />
            <anything order="1" />
            <number order="2" />
            <number order="3" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-layer-scrollfactor"
           code="setScrollFactorForLayer(#{0:layerRef}, #{2}, #{3});"
           spec="@scene.setlayerscrollfactor"
           help="@scene.setlayerscrollfactor.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <fields>
            <dropdown order="0" id="layerIDs" />
            <anything order="1" />
            <number order="2" />
            <number order="3" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="showhide-layer2"
           code="#{0}TileLayer(#{1:layerRef});"
           spec="@scene.showhidelayer2"
           help="@scene.showhidelayer2.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <fields>
            <dropdown order="0" id="showHide" />
            <dropdown order="1" id="layerIDs" />
            <anything order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="fadeTo-layer2"
           code="fadeTileLayerTo(#{0:layerRef}, #{2}/100, #{3});"
           spec="@scene.fadeto2"
           help="@scene.fadeto2.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <fields>
            <dropdown order="0" id="layerIDs" />
            <anything order="1" />
            <number order="2" />
            <number order="3" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="layer-alpha"
           code="getTileLayerOpacity(#{0:layerRef})"
           spec="@scene.layeralpha"
           help="@scene.layeralpha.help"
           type="normal"
           returns="number"
           category="scene"
           helpURL="scene-view">
        <fields>
            <dropdown order="0" id="layerIDs" />
            <anything order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-blend-layer2"
           code="setBlendModeForLayer(#{0:layerRef}, #{2});"
           spec="@draw.filter.blend.layer2"
           help="@draw.filter.blend.layer2.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <fields>
            <dropdown order="0" id="layerIDs" />
            <anything order="1" />
            <dropdown order="2" id="blend" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-bg-image"
           code="changeBackgroundImage(#{0:layerRef}, #{2});"
           spec="@scene.setbgimage"
           help="@scene.setbgimage.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <fields>
            <dropdown order="0" id="layerIDs" />
            <anything order="1" />
            <image order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="create-tile-layer"
           code="addTileLayer(#{0}, #{1});"
           spec="@scene.createtilelayer"
           help="@scene.createtilelayer.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <fields>
            <text order="0" />
            <int order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="create-bglayer-from-bg"
           code="addBackground(#{0}, #{1}, #{2});"
           spec="@scene.createlayerfrombg"
           help="@scene.createlayerfrombg.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <fields>
            <text order="0" />
            <text order="1" />
            <int order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="create-bglayer-from-image"
           code="addBackgroundFromImage(#{0}, #{1}, #{2}, #{3});"
           spec="@scene.createlayerfromimage"
           help="@scene.createlayerfromimage.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <fields>
            <image order="0" />
            <dropdown order="1" id="tiled" />
            <text order="2" />
            <int order="3" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="remove-layer"
           code="engine.removeLayer(#{0:layerRef});"
           spec="@scene.removelayer"
           help="@scene.removelayer.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <fields>
            <dropdown order="0" id="layerIDs" />
            <anything order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-layer-order"
           code="engine.moveLayerToOrder(#{0:layerRef}, #{2});"
           spec="@scene.setlayerorder"
           help="@scene.setlayerorder.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <fields>
            <dropdown order="0" id="layerIDs" />
            <anything order="1" />
            <int order="2" />
        </fields>
        <context>
            <requiredContext type="has" value="engine:com.stencyl.Engine" />
        </context>
    </block>

    <block tag="get-layer-order"
           code="engine.getOrderOfLayer(#{0:layerRef})"
           spec="@scene.getlayerorder"
           help="@scene.getlayerorder.help"
           type="normal"
           returns="int"
           category="scene"
           helpURL="scene-view">
        <fields>
            <dropdown order="0" id="layerIDs" />
            <anything order="1" />
        </fields>
        <context>
            <requiredContext type="has" value="engine:com.stencyl.Engine" />
        </context>
    </block>

    <block tag="numlayers"
           code="engine.getNumberOfLayers()"
           spec="@scene.numlayers"
           help="@scene.numlayers.help"
           type="normal"
           returns="int"
           category="scene"
           helpURL="scene-view">
        <context>
            <requiredContext type="has" value="engine:com.stencyl.Engine" />
        </context>
    </block>

    <block tag="offscreen"
           code="setOffscreenTolerance(#{0}, #{1}, #{2}, #{3});"
           spec="@adv.offscreen"
           help="@adv.offscreen.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view">
        <fields>
            <int order="0" />
            <int order="1" />
            <int order="2" />
            <int order="3" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="shader-apply"
           code="#{0}.enable();"
           spec="@scene.shaders.apply"
           help="@scene.shaders.apply.help"
           type="action"
           returns="scene"
           category="scene"
           helpURL="scene-shaders">
        <fields>
            <shader order="0" />
        </fields>
    </block>

    <block tag="shader-clear"
           code="engine.clearShaders();"
           spec="@scene.shaders.clear"
           help="@scene.shaders.clear.help"
           type="action"
           returns="scene"
           category="scene"
           helpURL="scene-shaders">
        <context>
            <requiredContext type="has" value="engine:com.stencyl.Engine" />
        </context>
    </block>

    <block tag="shader-hud"
           code="engine.toggleShadersForHUD();"
           spec="@scene.shaders.hud"
           help="@scene.shaders.hud.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-shaders">
        <context>
            <requiredContext type="has" value="engine:com.stencyl.Engine" />
        </context>
    </block>

    <block tag="shader-combine"
           code="#{0}.combine(#{1})"
           spec="@scene.shaders.combine"
           help="@scene.shaders.combine.help"
           type="normal"
           returns="shader"
           category="scene"
           helpURL="scene-shaders">
        <fields>
            <shader order="0" />
            <shader order="1" />
        </fields>
    </block>

    <block tag="shader-combine3"
           code="#{0}.combine(#{1}).combine(#{2})"
           spec="@scene.shaders.combine3"
           help="@scene.shaders.combine3.help"
           type="normal"
           returns="shader"
           category="scene"
           helpURL="scene-shaders">
        <fields>
            <shader order="0" />
            <shader order="1" />
            <shader order="2" />
        </fields>
    </block>

    <block tag="shader-combine4"
           code="#{0}.combine(#{1}).combine(#{2}).combine(#{3})"
           spec="@scene.shaders.combine4"
           help="@scene.shaders.combine4.help"
           type="normal"
           returns="shader"
           category="scene"
           helpURL="scene-shaders">
        <fields>
            <shader order="0" />
            <shader order="1" />
            <shader order="2" />
            <shader order="3" />
        </fields>
    </block>

    <block tag="shader-file"
           code="new ExternalShader(#{0})"
           spec="@scene.shaders.file"
           help="@scene.shaders.file.help"
           type="normal"
           returns="shader"
           category="scene"
           helpURL="scene-shaders">
        <fields>
            <text order="0" />
        </fields>
    </block>

    <block tag="shader-text"
           code="new InlineShader(&quot;#{0}&quot;)"
           spec="@scene.shaders.text"
           help="@scene.shaders.text.help"
           type="normal"
           returns="shader"
           category="scene"
           helpURL="scene-shaders">
        <fields>
            <code order="0" />
        </fields>
    </block>

    <block tag="shader-set"
           code="#{0}.setProperty(#{1}, #{2});"
           spec="@scene.shaders.set"
           help="@scene.shaders.set.help"
           type="action"
           returns="scene"
           category="scene"
           helpURL="scene-shaders">
        <fields>
            <shader order="0" />
            <text order="1" />
            <anything order="2" />
        </fields>
    </block>

    <block tag="shader-tween"
           code="#{0}.tweenProperty(#{1}, #{2}, #{3}, #{4});"
           spec="@scene.shaders.tween"
           help="@scene.shaders.tween.help"
           type="action"
           returns="scene"
           category="scene"
           helpURL="scene-shaders">
        <fields>
            <shader order="0" />
            <text order="1" />
            <number order="2" />
            <number order="3" />
            <dropdown order="4" id="easing" />
        </fields>
    </block>

    <block tag="shader-time"
           code="#{0}.setTimeScale(#{1});"
           spec="@scene.shaders.time"
           help="@scene.shaders.time.help"
           type="action"
           returns="scene"
           category="scene"
           helpURL="scene-shaders">
        <fields>
            <shader order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="shader-hue"
           code="new HueShader(#{0})"
           spec="@scene.shaders.hue"
           help="@scene.shaders.hue.help"
           type="normal"
           returns="shader"
           category="scene"
           helpURL="scene-shaders">
        <fields>
            <number order="0" />
        </fields>
    </block>

    <block tag="shader-csb"
           code="CSBShader.create(&quot;#{0}&quot;, #{1}/100)"
           spec="@scene.shaders.csb"
           help="@scene.shaders.csb.help"
           type="normal"
           returns="shader"
           category="scene"
           helpURL="scene-shaders">
        <fields>
            <dropdown order="0" id="csb" />
            <number order="1" />
        </fields>
    </block>

    <block tag="shader-tint"
           code="new TintShader(#{0}, #{1}/100)"
           spec="@scene.shaders.tint"
           help="@scene.shaders.tint.help"
           type="normal"
           returns="shader"
           category="scene"
           helpURL="scene-shaders">
        <fields>
            <color order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="shader-filters"
           code="new #{0}Shader()"
           spec="@scene.shaders.filters"
           help="@scene.shaders.filters.help"
           type="normal"
           returns="shader"
           category="scene"
           helpURL="scene-shaders">
        <fields>
            <dropdown order="0" id="filters" />
        </fields>
    </block>

    <block tag="shader-blur"
           code="new BlurShader(#{0}, #{1}, #{2})"
           spec="@scene.shaders.blur"
           help="@scene.shaders.blur.help"
           type="normal"
           returns="shader"
           category="scene"
           helpURL="scene-shaders">
        <fields>
            <number order="0" />
            <number order="1" />
            <number order="2" />
        </fields>
    </block>

    <block tag="shader-sharpen"
           code="new SharpenShader(#{0})"
           spec="@scene.shaders.sharpen"
           help="@scene.shaders.sharpen.help"
           type="normal"
           returns="shader"
           category="scene"
           helpURL="scene-shaders">
        <fields>
            <number order="0" />
        </fields>
    </block>

    <block tag="shader-bloom"
           code="new BloomShader()"
           spec="@scene.shaders.bloom"
           help="@scene.shaders.bloom.help"
           type="normal"
           returns="shader"
           category="scene"
           helpURL="scene-shaders">
    </block>

    <block tag="shader-grain"
           code="new GrainShader()"
           spec="@scene.shaders.grain"
           help="@scene.shaders.grain.help"
           type="normal"
           returns="shader"
           category="scene"
           helpURL="scene-shaders">
    </block>

    <block tag="shader-scanline"
           code="new ScanlineShader(#{0})"
           spec="@scene.shaders.scanline"
           help="@scene.shaders.scanline.help"
           type="normal"
           returns="shader"
           category="scene"
           helpURL="scene-shaders">
        <fields>
            <number order="0" />
        </fields>
    </block>

    <block tag="create-recycled-actor"
           code="createRecycledActor(#{0}, #{1}, #{2}, #{3});"
           spec="@scene.createractor"
           help="@scene.createractor.help"
           type="action"
           returns="actor"
           category="scene"
           helpURL="scene-actors"
           deprecated="true">
        <fields>
            <actortype order="0" />
            <number order="1" />
            <number order="2" />
            <dropdown order="3" id="layers" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="joint"
           code="#{0}"
           spec="@scene.joint"
           help="@scene.joint.help"
           type="normal"
           returns="joint"
           category="scene"
           helpURL="scene-actors">
        <fields>
            <joint order="0" />
        </fields>
    </block>

    <block tag="gravx"
           code="getGravity().x"
           spec="@scene.gravx"
           help="@scene.gravx.help"
           type="normal"
           returns="number"
           category="scene"
           helpURL="scene-world"
           deprecated="true">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="gravy"
           code="getGravity().y"
           spec="@scene.gravy"
           help="@scene.gravy.help"
           type="normal"
           returns="number"
           category="scene"
           helpURL="scene-world"
           deprecated="true">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="scenew"
           code="getSceneWidth()"
           spec="@scene.scenew"
           help="@scene.scenew.help"
           type="normal"
           returns="int"
           category="scene"
           helpURL="scene-world"
           deprecated="true">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="sceneh"
           code="getSceneHeight()"
           spec="@scene.sceneh"
           help="@scene.sceneh.help"
           type="normal"
           returns="int"
           category="scene"
           helpURL="scene-world"
           deprecated="true">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="scenewt"
           code="getSceneWidth()/getTileWidth()"
           spec="@scene.scenewt"
           help="@scene.scenewt.help"
           type="normal"
           returns="number"
           category="scene"
           helpURL="scene-world"
           deprecated="true">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="sceneht"
           code="getSceneHeight()/getTileHeight()"
           spec="@scene.sceneht"
           help="@scene.sceneht.help"
           type="normal"
           returns="number"
           category="scene"
           helpURL="scene-world"
           deprecated="true">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="tilew"
           code="getTileWidth()"
           spec="@scene.tilew"
           help="@scene.tilew.help"
           type="normal"
           returns="int"
           category="scene"
           helpURL="scene-world"
           deprecated="true">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="tileh"
           code="getTileHeight()"
           spec="@scene.tileh"
           help="@scene.tileh.help"
           type="normal"
           returns="int"
           category="scene"
           helpURL="scene-world"
           deprecated="true">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-tile-at"
           code="setTileAt(#{0}, #{1}, #{2}, #{3}, #{4});"
           spec="@scene.tile.set"
           help="@scene.tile.set.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-world"
           deprecated="true">
        <fields>
            <int order="0" />
            <int order="1" />
            <number order="2" />
            <number order="3" />
            <number order="4" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="tile-exists-at"
           code="tileExistsAt(#{0}, #{1}, #{2})"
           spec="@scene.tile.exists"
           help="@scene.tile.exists.help"
           type="normal"
           returns="boolean"
           category="scene"
           helpURL="scene-world"
           deprecated="true">
        <fields>
            <int order="0" />
            <int order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="tileID-at"
           code="getTileIDAt(#{0}, #{1}, #{2})"
           spec="@scene.tile.id"
           help="@scene.tile.id.help"
           type="normal"
           returns="int"
           category="scene"
           helpURL="scene-world"
           deprecated="true">
        <fields>
            <int order="0" />
            <int order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="tileCollisionAt"
           code="tileCollisionAt(#{0}, #{1}, #{2})"
           spec="@scene.tile.collision"
           help="@scene.tile.collision.help"
           type="normal"
           returns="boolean"
           category="scene"
           helpURL="scene-world"
           deprecated="true">
        <fields>
            <int order="0" />
            <int order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="tileColID-at"
           code="getTileColIDAt(#{0}, #{1}, #{2})"
           spec="@scene.tile.collisionid"
           help="@scene.tile.collisionid.help"
           type="normal"
           returns="int"
           category="scene"
           helpURL="scene-world"
           deprecated="true">
        <fields>
            <int order="0" />
            <int order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="tilesetID-at"
           code="getTilesetIDAt(#{0}, #{1}, #{2})"
           spec="@scene.tile.tsetid"
           help="@scene.tile.tsetid.help"
           type="normal"
           returns="int"
           category="scene"
           helpURL="scene-world"
           deprecated="true">
        <fields>
            <int order="0" />
            <int order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="remove-tile-at"
           code="removeTileAt(#{0}, #{1}, #{2});"
           spec="@scene.tile.remove"
           help="@scene.tile.remove.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-world"
           deprecated="true">
        <fields>
            <int order="0" />
            <int order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="tile-data-at"
           code="getTileDataAt(#{0}, #{1}, #{2})"
           spec="@scene.tile.data"
           help="@scene.tile.data.help"
           type="normal"
           returns="text"
           category="scene"
           helpURL="scene-world"
           deprecated="true">
        <fields>
            <int order="0" />
            <int order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="showhide-layer"
           code="#{0}TileLayer((#{1}));"
           spec="@scene.showhidelayer"
           help="@scene.showhidelayer.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view"
           deprecated="true">
        <fields>
            <dropdown order="0" id="showHide" />
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="show-layer"
           code="showTileLayer((#{0}));"
           spec="@scene.showlayer"
           help="@scene.showlayer.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view"
           deprecated="true">
        <fields>
            <number order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="hide-layer"
           code="hideTileLayer((#{0}));"
           spec="@scene.hidelayer"
           help="@scene.hidelayer.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view"
           deprecated="true">
        <fields>
            <number order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="fadeTo-layer"
           code="fadeTileLayerTo(#{0}, #{1}/100, #{2});"
           spec="@scene.fadeto"
           help="@scene.fadeto.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view"
           deprecated="true">
        <fields>
            <number order="0" />
            <number order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="screenw"
           code="getScreenWidth()"
           spec="@scene.screenw"
           help="@scene.screenw.help"
           type="normal"
           returns="int"
           category="scene"
           helpURL="scene-view"
           deprecated="true">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="screenh"
           code="getScreenHeight()"
           spec="@scene.screenh"
           help="@scene.screenh.help"
           type="normal"
           returns="int"
           category="scene"
           helpURL="scene-view"
           deprecated="true">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="screenx"
           code="getScreenX()"
           spec="@scene.screenx"
           help="@scene.screenx.help"
           type="normal"
           returns="number"
           category="scene"
           helpURL="scene-view"
           deprecated="true">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="screeny"
           code="getScreenY()"
           spec="@scene.screeny"
           help="@scene.screeny.help"
           type="normal"
           returns="number"
           category="scene"
           helpURL="scene-view"
           deprecated="true">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-blend-layer"
           code="setBlendModeForLayer(#{0}, #{1});"
           spec="@draw.filter.blend.layer"
           help="@draw.filter.blend.layer.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-view"
           deprecated="true">
        <fields>
            <number order="0" />
            <dropdown order="1" id="blend" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="scene-reload"
           code="${deprecated}"
           spec="@scene.reload"
           help="@scene.reload.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-flow"
           deprecated="true">
        <fields>
            <dropdown order="0" id="fadeTransitions" />
            <number order="1" />
            <dropdown order="2" id="fadeTransitions" />
            <number order="3" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="scene-change3"
           code="${deprecated}"
           spec="@scene.change"
           help="@scene.change.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-flow"
           deprecated="true">
        <fields>
            <scene order="0" />
            <dropdown order="1" id="fadeTransitions" />
            <number order="2" />
            <dropdown order="3" id="fadeTransitions" />
            <number order="4" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="scene-reload-new"
           code="reloadCurrentScene(#{0}(#{1}), #{2}(#{3}));"
           spec="@scene.reload"
           help="@scene.reload.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-flow"
           deprecated="true">
        <fields>
            <dropdown order="0" id="outTransitions" />
            <number order="1" />
            <dropdown order="2" id="inTransitions" />
            <number order="3" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="scene-change-new"
           code="switchScene(#{0}.getID(), #{1}(#{2}), #{3}(#{4}));"
           spec="@scene.change"
           help="@scene.change.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-flow"
           deprecated="true">
        <fields>
            <scene order="0" />
            <dropdown order="1" id="outTransitions" />
            <number order="2" />
            <dropdown order="3" id="inTransitions" />
            <number order="4" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="pause-all"
           code="#{0}All();"
           spec="@scene.actor.pauseall"
           help="@scene.actor.pauseall.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-flow"
           deprecated="true">
        <fields>
            <dropdown order="0" id="pauseUnpause" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="pause-all-group"
           code="getActorGroup(#{0}).#{1}All();"
           spec="@scene.actor.pauseall.group"
           help="@scene.actor.pauseall.group.help"
           type="action"
           returns="void"
           category="scene"
           helpURL="scene-flow"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="actorgroups" />
            </dropdown>
            <dropdown order="1" id="pauseUnpause" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="plus"
           code="(#{0} + #{1})"
           spec="@num.plus"
           help="@num.plus.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-math">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="minus"
           code="(#{0} - #{1})"
           spec="@num.minus"
           help="@num.minus.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-math">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="times"
           code="(#{0} * #{1})"
           spec="@num.times"
           help="@num.times.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-math">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="div"
           code="(#{0} / #{1})"
           spec="@num.divide"
           help="@num.divide.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-math">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="neg"
           code="-(#{0})"
           spec="@num.neg"
           help="@num.neg.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-math">
        <fields>
            <number order="0" />
        </fields>
    </block>

    <block tag="mod"
           code="(#{0} % #{1})"
           spec="@num.mod"
           help="@num.mod.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-math">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="randint"
           code="randomInt(#{0}, #{1})"
           spec="@num.randint"
           help="@num.randint.help"
           type="normal"
           returns="int"
           category="numbers"
           helpURL="number-math">
        <fields>
            <int order="0" />
            <int order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="random"
           code="randomFloat()"
           spec="@num.rand"
           help="@num.rand.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-math">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="randomfloat"
           code="randomFloatBetween(#{0}, #{1})"
           spec="@num.randfloat"
           help="@num.randfloat.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-math">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="incdec"
           code="${incDec}"
           spec="@num.incdec"
           help="@num.incdec.help"
           type="action"
           returns="void"
           category="numbers"
           helpURL="number-math">
        <fields>
            <dropdown order="0">
                <choices supplier="var:number" />
            </dropdown>
            <dropdown order="1" id="incDec" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="abs"
           code="Math.abs(#{0})"
           spec="@num.abs"
           help="@num.abs.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-math">
        <fields>
            <number order="0" />
        </fields>
    </block>

    <block tag="minmax"
           code="Math.#{0}(#{1}, #{2})"
           spec="@num.minmax"
           help="@num.minmax.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-math">
        <fields>
            <dropdown order="0" id="smallerLarger" />
            <number order="1" />
            <number order="2" />
        </fields>
    </block>

    <block tag="roundnew"
           code="Math.#{0}(#{1})"
           spec="@num.round"
           help="@num.round.help"
           type="normal"
           returns="int"
           category="numbers"
           helpURL="number-math">
        <fields>
            <dropdown order="0" id="round" />
            <number order="1" />
        </fields>
    </block>

    <block tag="as-number"
           code="asNumber(#{0})"
           spec="@num.asnumber"
           help="@num.asnumber.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-math">
        <fields>
            <anything order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="to-degreesradians"
           code="Utils.#{0} * (#{1})"
           spec="@num.degreesradians"
           help="@num.degreesradians.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-trig">
        <fields>
            <dropdown order="0" id="degreesRadians" />
            <number order="1" />
        </fields>
    </block>

    <block tag="pi"
           code="Math.PI"
           spec="@num.pi"
           help="@num.pi.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-trig">
    </block>

    <block tag="e"
           code="2.71828"
           spec="@num.e"
           help="@num.e.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-trig">
    </block>

    <block tag="trig-master"
           code="Math.#{0}(#{1} #{2})"
           spec="@num.trig"
           help="@num.trig.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-trig">
        <fields>
            <dropdown order="0" id="trig" />
            <number order="1" />
            <dropdown order="2" id="degreesRadiansInline" />
        </fields>
    </block>

    <block tag="atan2"
           code="Math.atan2(#{0}, #{1})"
           spec="@num.atan2"
           help="@num.atan2.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-trig">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="sqrt"
           code="Math.sqrt(#{0})"
           spec="@num.sqrt"
           help="@num.sqrt.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-trig">
        <fields>
            <number order="0" />
        </fields>
    </block>

    <block tag="pow"
           code="Math.pow(#{0}, #{1})"
           spec="@num.pow"
           help="@num.pow.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-trig">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="lnexp"
           code="Math.#{0}(#{1})"
           spec="@num.lnexp"
           help="@num.lnexp.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-trig">
        <fields>
            <dropdown order="0" id="lnExp" />
            <number order="1" />
        </fields>
    </block>

    <block tag="tostring"
           code="(&quot;&quot; + #{0})"
           spec="@num.string"
           help="@num.string.help"
           type="normal"
           returns="text"
           category="text"
           helpURL="number-text">
        <fields>
            <anything order="0" />
        </fields>
    </block>

    <block tag="str-length"
           code="(#{0}).length"
           spec="@gui.str.length"
           help="@gui.str.length.help"
           type="normal"
           returns="int"
           category="text"
           helpURL="number-text">
        <fields>
            <text order="0" />
        </fields>
    </block>

    <block tag="str-combine"
           code="((#{0}) + (#{1}))"
           spec="@gui.str.combine"
           help="@gui.str.combine.help"
           type="normal"
           returns="text"
           category="text"
           helpURL="number-text">
        <fields>
            <text order="0" />
            <text order="1" />
        </fields>
    </block>

    <block tag="str-trim"
           code="StringTools.trim((#{0}))"
           spec="@gui.str.trim"
           help="@gui.str.trim.help"
           type="normal"
           returns="text"
           category="text"
           helpURL="number-text">
        <fields>
            <text order="0" />
        </fields>
    </block>

    <block tag="str-emptystring"
           code="&quot;&quot;"
           spec="@gui.str.emptystring"
           help="@gui.str.emptystring.help"
           type="normal"
           returns="text"
           category="text"
           helpURL="number-text">
    </block>

    <block tag="str-space"
           code="&quot; &quot;"
           spec="@gui.str.space"
           help="@gui.str.space.help"
           type="normal"
           returns="text"
           category="text"
           helpURL="number-text">
    </block>

    <block tag="str-empty"
           code="(#{0}) == (&quot;&quot;)"
           spec="@gui.str.empty"
           help="@gui.str.empty.help"
           type="normal"
           returns="boolean"
           category="text"
           helpURL="number-text">
        <fields>
            <text order="0" />
        </fields>
    </block>

    <block tag="str-beforeafter"
           code="strCompare((#{0}), (#{1}), #{2})"
           spec="@gui.str.beforeafter"
           help="@gui.str.beforeafter.help"
           type="normal"
           returns="boolean"
           category="text"
           helpURL="number-text">
        <fields>
            <text order="0" />
            <text order="1" />
            <dropdown order="2" id="beforeAfter" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="str-char-at"
           code="(#{0}).charAt(#{1})"
           spec="@gui.str.charat"
           help="@gui.str.charat.help"
           type="normal"
           returns="text"
           category="text"
           helpURL="number-text">
        <fields>
            <text order="0" />
            <int order="1" />
        </fields>
    </block>

    <block tag="str-indexof"
           code="(#{0}).indexOf(#{1})"
           spec="@gui.str.locof"
           help="@gui.str.locof.help"
           type="normal"
           returns="int"
           category="text"
           helpURL="number-text">
        <fields>
            <text order="0" />
            <text order="1" />
        </fields>
    </block>

    <block tag="str-replace"
           code="StringTools.replace((#{0}), (#{1}), (#{2}))"
           spec="@gui.str.replace"
           help="@gui.str.replace.help"
           type="normal"
           returns="text"
           category="text"
           helpURL="number-text">
        <fields>
            <text order="0" />
            <text order="1" />
            <text order="2" />
        </fields>
    </block>

    <block tag="str-substring"
           code="(#{0}).substring(#{1}, #{2})"
           spec="@gui.str.substr"
           help="@gui.str.substr.help"
           type="normal"
           returns="text"
           category="text"
           helpURL="number-text">
        <fields>
            <text order="0" />
            <int order="1" />
            <int order="2" />
        </fields>
    </block>

    <block tag="str-toupperlower"
           code="(#{0}).to#{1}Case()"
           spec="@gui.str.toupperlower"
           help="@gui.str.toupperlower.help"
           type="normal"
           returns="text"
           category="text"
           helpURL="number-text">
        <fields>
            <text order="0" />
            <dropdown order="1" id="upperLower" />
        </fields>
    </block>

    <block tag="str-split-space"
           code="(#{0}).split(&quot; &quot;)"
           spec="@gui.str.splitspace"
           help="@gui.str.splitspace.help"
           type="normal"
           returns="list"
           category="text"
           helpURL="number-text">
        <fields>
            <text order="0" />
        </fields>
    </block>

    <block tag="str-split"
           code="(#{0}).split(#{1})"
           spec="@gui.str.split"
           help="@gui.str.split.help"
           type="normal"
           returns="list"
           category="text"
           helpURL="number-text">
        <fields>
            <text order="0" />
            <text order="1" />
        </fields>
    </block>

    <block tag="increment"
           code="#{0} += #{1};"
           spec="@num.increment"
           help="@num.increment.help"
           type="action"
           returns="void"
           category="numbers"
           helpURL="number-math"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:number" />
            </dropdown>
            <number order="1" />
        </fields>
    </block>

    <block tag="decrement"
           code="#{0} -= #{1};"
           spec="@num.decrement"
           help="@num.decrement.help"
           type="action"
           returns="void"
           category="numbers"
           helpURL="number-math"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:number" />
            </dropdown>
            <number order="1" />
        </fields>
    </block>

    <block tag="min"
           code="Math.min(#{0}, #{1})"
           spec="@num.min"
           help="@num.min.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-math"
           deprecated="true">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="max"
           code="Math.max(#{0}, #{1})"
           spec="@num.max"
           help="@num.max.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-math"
           deprecated="true">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
    </block>

    <block tag="ln"
           code="Math.log(#{0})"
           spec="@num.ln"
           help="@num.ln.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-trig"
           deprecated="true">
        <fields>
            <number order="0" />
        </fields>
    </block>

    <block tag="exp"
           code="Math.exp(#{0})"
           spec="@num.exp"
           help="@num.exp.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-trig"
           deprecated="true">
        <fields>
            <number order="0" />
        </fields>
    </block>

    <block tag="to-degrees"
           code="Utils.toDegrees(#{0})"
           spec="@num.degrees"
           help="@num.degrees.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-trig"
           deprecated="true">
        <fields>
            <number order="0" />
        </fields>
    </block>

    <block tag="to-radians"
           code="Util.toRadians(#{0})"
           spec="@num.radians"
           help="@num.radians.help"
           type="normal"
           returns="number"
           category="numbers"
           helpURL="number-trig"
           deprecated="true">
        <fields>
            <number order="0" />
        </fields>
    </block>

    <block tag="str-same"
           code="sameAs(#{0}, #{1})"
           spec="@num.eq"
           help="@num.eq.help"
           type="normal"
           returns="boolean"
           category="numbers"
           helpURL="number-text"
           deprecated="true">
        <fields>
            <anything order="0" />
            <anything order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="str-before"
           code="(#{0}).localeCompare(String(#{1})) &lt; 0)"
           spec="@gui.str.before"
           help="@gui.str.before.help"
           type="normal"
           returns="boolean"
           category="text"
           helpURL="number-text"
           deprecated="true">
        <fields>
            <text order="0" />
            <text order="1" />
        </fields>
    </block>

    <block tag="str-after"
           code="(#{0}).localeCompare(String(#{1})) &gt; 0)"
           spec="@gui.str.after"
           help="@gui.str.after.help"
           type="normal"
           returns="boolean"
           category="text"
           helpURL="number-text"
           deprecated="true">
        <fields>
            <text order="0" />
            <text order="1" />
        </fields>
    </block>

    <block tag="str-toupper"
           code="(#{0}).toUpperCase()"
           spec="@gui.str.toupper"
           help="@gui.str.toupper.help"
           type="normal"
           returns="text"
           category="text"
           helpURL="number-text"
           deprecated="true">
        <fields>
            <text order="0" />
        </fields>
    </block>

    <block tag="str-tolower"
           code="(#{0}).toLowerCase()"
           spec="@gui.str.tolower"
           help="@gui.str.tolower.help"
           type="normal"
           returns="text"
           category="text"
           helpURL="number-text"
           deprecated="true">
        <fields>
            <text order="0" />
        </fields>
    </block>

    <block tag="create-list"
           code="new Array&lt;Dynamic&gt;()"
           spec="@vars.list.create"
           help="@vars.list.create.help"
           type="normal"
           returns="list"
           category="attributes"
           helpURL="attributes-lists">
    </block>

    <block tag="copy-list"
           code="#{0}.copy()"
           spec="@vars.list.copy"
           help="@vars.list.copy.help"
           type="normal"
           returns="list"
           category="attributes"
           helpURL="attributes-lists">
        <fields>
            <list order="0" typeCheck="true" />
        </fields>
    </block>

    <block tag="add-list"
           code="#{0}.push(#{1});"
           spec="@vars.list.add"
           help="@vars.list.add.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="attributes-lists">
        <fields>
            <list order="0" />
            <anything order="1" />
        </fields>
    </block>

    <block tag="insert-list"
           code="#{0}.insert(#{1}, #{2});"
           spec="@vars.list.insert"
           help="@vars.list.insert.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="attributes-lists">
        <fields>
            <list order="0" typeCheck="true" />
            <int order="1" />
            <anything order="2" />
        </fields>
    </block>

    <block tag="remove-item"
           code="#{0}.remove(#{1});"
           spec="@vars.list.remove"
           help="@vars.list.remove.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="attributes-lists">
        <fields>
            <list order="0" typeCheck="true" />
            <anything order="1" />
        </fields>
    </block>

    <block tag="remove-index"
           code="#{0}.splice(#{1}, 1);"
           spec="@vars.list.removeat"
           help="@vars.list.removeat.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="attributes-lists">
        <fields>
            <list order="0" />
            <int order="1" />
        </fields>
    </block>

    <block tag="replace-list"
           code="#{0}[#{1}] = #{2};"
           spec="@vars.list.replace"
           help="@vars.list.replace.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="attributes-lists">
        <fields>
            <list order="0" />
            <int order="1" />
            <anything order="2" />
        </fields>
    </block>

    <block tag="clear-list"
           code="Utils.clear(#{0});"
           spec="@vars.list.clear"
           help="@vars.list.clear.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="attributes-lists">
        <fields>
            <list order="0" />
        </fields>
    </block>

    <block tag="get-item"
           code="#{0}[#{1}]"
           spec="@vars.list.get"
           help="@vars.list.get.help"
           type="normal"
           returns="anything"
           category="attributes"
           helpURL="attributes-lists">
        <fields>
            <list order="0" />
            <int order="1" />
        </fields>
    </block>

    <block tag="position-of-item"
           code="#{0}.indexOf(#{1})"
           spec="@vars.list.position"
           help="@vars.list.position.help"
           type="normal"
           returns="int"
           category="attributes"
           helpURL="attributes-lists">
        <fields>
            <list order="0" />
            <anything order="1" />
        </fields>
    </block>

    <block tag="contains-item"
           code="Utils.contains(#{0}, #{1})"
           spec="@vars.list.contains"
           help="@vars.list.contains.help"
           type="normal"
           returns="boolean"
           category="attributes"
           helpURL="attributes-lists">
        <fields>
            <list order="0" />
            <anything order="1" />
        </fields>
    </block>

    <block tag="length-list"
           code="#{0}.length"
           spec="@vars.list.length"
           help="@vars.list.length.help"
           type="normal"
           returns="int"
           category="attributes"
           helpURL="attributes-lists">
        <fields>
            <list order="0" />
        </fields>
    </block>

    <block tag="is-empty"
           code="(#{0}.length == 0)"
           spec="@vars.list.empty"
           help="@vars.list.empty.help"
           type="normal"
           returns="boolean"
           category="attributes"
           helpURL="attributes-lists">
        <fields>
            <list order="0" />
        </fields>
    </block>

    <block tag="for-each-item"
           code="item"
           spec="@vars.list.foreachitem"
           help="@vars.list.foreachitem.help"
           type="normal"
           returns="anything"
           category="attributes"
           hidden="true"
           helpURL="attributes-lists">
        <context>
            <requiredContext type="has" value="item:Dynamic" />
        </context>
    </block>

    <block tag="for-each"
           code="for(item in cast(#{0}, Array&lt;Dynamic&gt;))&#10;{&#10;#{1}&#10;}"
           spec="@vars.list.foreach"
           help="@vars.list.foreach.help"
           type="wrapper"
           returns="void"
           category="flow"
           helpURL="attributes-lists"
           isLoop="true">
        <fields>
            <list order="0" />
            <code-block order="1" />
            <attached-block order="2" tag="for-each-item" />
        </fields>
        <context>
            <innerContext type="has" value="item:Dynamic" />
            <innerContext type="keyword" value="break" />
            <innerContext type="keyword" value="continue" />
        </context>
    </block>

    <block tag="create-map"
           code="new Map&lt;String, Dynamic&gt;()"
           spec="@vars.map.create"
           help="@vars.map.create.help"
           type="normal"
           returns="map"
           category="attributes"
           helpURL="attributes-maps">
    </block>

    <block tag="copy-map"
           code="Utils.copyMap(#{0})"
           spec="@vars.map.copy"
           help="@vars.map.copy.help"
           type="normal"
           returns="map"
           category="attributes"
           helpURL="attributes-maps">
        <fields>
            <map order="0" />
        </fields>
    </block>

    <block tag="set-map"
           code="#{0}.set(#{1}, #{2});"
           spec="@vars.map.set"
           help="@vars.map.set.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="attributes-maps">
        <fields>
            <map order="0" />
            <text order="1" />
            <anything order="2" />
        </fields>
    </block>

    <block tag="remove-map"
           code="#{0}.remove(#{1});"
           spec="@vars.map.remove"
           help="@vars.map.remove.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="attributes-maps">
        <fields>
            <map order="0" />
            <text order="1" />
        </fields>
    </block>

    <block tag="empty-map"
           code="for (key in (#{0} : Map&lt;String,Dynamic&gt;).keys())&#10;{&#10;#{0}.remove(key);&#10;}"
           spec="@vars.map.empty"
           help="@vars.map.empty.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="attributes-maps">
        <fields>
            <map order="0" />
        </fields>
    </block>

    <block tag="key-value"
           code="#{0}.get(#{1})"
           spec="@vars.map.get"
           help="@vars.map.get.help"
           type="normal"
           returns="anything"
           category="attributes"
           helpURL="attributes-maps">
        <fields>
            <map order="0" />
            <text order="1" />
        </fields>
    </block>

    <block tag="key-exists-map"
           code="#{0}.exists(#{1})"
           spec="@vars.map.exists"
           help="@vars.map.exists.help"
           type="normal"
           returns="boolean"
           category="attributes"
           helpURL="attributes-maps">
        <fields>
            <map order="0" />
            <text order="1" />
        </fields>
    </block>

    <block tag="value-exists-map"
           code="Utils.mapContainsValue(#{0}, #{1})"
           spec="@vars.map.contains"
           help="@vars.map.contains.help"
           type="normal"
           returns="boolean"
           category="attributes"
           helpURL="attributes-maps">
        <fields>
            <map order="0" />
            <anything order="1" />
        </fields>
    </block>

    <block tag="count-map"
           code="Utils.mapCount(#{0})"
           spec="@vars.map.count"
           help="@vars.map.count.help"
           type="normal"
           returns="int"
           category="attributes"
           helpURL="attributes-maps">
        <fields>
            <map order="0" />
        </fields>
    </block>

    <block tag="map-is-empty"
           code="Utils.mapCount(#{0}) == 0"
           spec="@vars.map.isempty"
           help="@vars.map.isempty.help"
           type="normal"
           returns="boolean"
           category="attributes"
           helpURL="attributes-maps">
        <fields>
            <map order="0" />
        </fields>
    </block>

    <block tag="map-as-list"
           code="Utils.mapToList(#{0}, &quot;#{1}&quot;)"
           spec="@vars.map.aslist"
           help="@vars.map.aslist.help"
           type="normal"
           returns="list"
           category="flow"
           helpURL="attributes-maps">
        <fields>
            <map order="0" />
            <dropdown order="1" id="keyValue" />
        </fields>
    </block>

    <block tag="for-each-map"
           code="for(item in (#{0} : Map&lt;String,Dynamic&gt;)#{1})&#10;{&#10;#{2}&#10;}"
           spec="@vars.map.foreach"
           help="@vars.map.foreach.help"
           type="wrapper"
           returns="void"
           category="flow"
           helpURL="attributes-maps"
           isLoop="true">
        <fields>
            <map order="0" />
            <dropdown order="1" id="inKeyValue" />
            <code-block order="2" />
            <attached-block order="3" tag="for-each-item" />
        </fields>
        <context>
            <innerContext type="has" value="item:Dynamic" />
            <innerContext type="keyword" value="break" />
            <innerContext type="keyword" value="continue" />
        </context>
    </block>

    <block tag="tween-number"
           code="var attributeTween = attributeTweens.get(&quot;#{1}&quot;);&#10;if(attributeTween == null)&#10;{&#10;attributeTween = new TweenFloat();&#10;attributeTween.doOnUpdate(function() {#{1} = attributeTween.value;});&#10;attributeTweens.set(&quot;#{1}&quot;, attributeTween);&#10;}&#10;attributeTween.tween(#{1}, #{2}, #{3}, Std.int(#{0}*1000));"
           spec="@vars.tween.num"
           help="@vars.tween.num.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="attributes-func">
        <fields>
            <number order="0" />
            <dropdown order="1">
                <choices supplier="var:number" />
            </dropdown>
            <number order="2" />
            <dropdown order="3" id="easing" />
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="cancel-tween-number"
           code="abortTweenNumber(&quot;#{0}&quot;);"
           spec="@vars.tween.num.cancel"
           help="@vars.tween.num.cancel.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="attributes-func">
        <fields>
            <dropdown order="0">
                <choices supplier="var:number" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="value"
           code="(#{1}hasValue(#{0}))"
           spec="@vars.value"
           help="@vars.value.help"
           type="normal"
           returns="boolean"
           category="attributes"
           helpURL="attributes-func">
        <fields>
            <dropdown order="0">
                <choices supplier="var:any" />
            </dropdown>
            <dropdown order="1" id="value" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="clear"
           code="#{0} = getDefaultValue(#{0});"
           spec="@vars.clear"
           help="@vars.clear.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="attributes-func">
        <fields>
            <dropdown order="0">
                <choices supplier="var:any" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-val-actor"
           code="#{0}"
           spec="@vars.getvalue"
           help="@vars.getvalue.help"
           type="normal"
           returns="actor"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:actor" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-val-actor"
           code="#{0} = #{1};"
           spec="@vars.setvalue"
           help="@vars.setvalue.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:actor" />
            </dropdown>
            <actor order="1" />
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-val-actortype"
           code="#{0}"
           spec="@vars.getvalue"
           help="@vars.getvalue.help"
           type="normal"
           returns="actortype"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:actortype" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-val-actortype"
           code="#{0} = getActorType(#{1});"
           spec="@vars.setvalue"
           help="@vars.setvalue.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:actortype" />
            </dropdown>
            <dropdown order="1">
                <choices supplier="resource:actortype" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-val-bool"
           code="#{0}"
           spec="@vars.getvalue"
           help="@vars.getvalue.help"
           type="normal"
           returns="boolean"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:boolean" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-val-bool"
           code="#{0} = #{1};"
           spec="@vars.setvalue"
           help="@vars.setvalue.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:boolean" />
            </dropdown>
            <boolean order="1" />
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-val-camera"
           code="#{0}"
           spec="@vars.getvalue"
           help="@vars.getvalue.help"
           type="normal"
           returns="camera"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:camera" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-val-camera"
           code="#{0} = getCamera(#{1});"
           spec="@vars.setvalue"
           help="@vars.setvalue.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:camera" />
            </dropdown>
            <camera order="1" />
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-val-color"
           code="#{0}"
           spec="@vars.getvalue"
           help="@vars.getvalue.help"
           type="normal"
           returns="color"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:color" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-val-color"
           code="#{0} = #{1};"
           spec="@vars.setvalue"
           help="@vars.setvalue.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:color" />
            </dropdown>
            <color order="1" />
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-val-float"
           code="#{0}"
           spec="@vars.getvalue"
           help="@vars.getvalue.help"
           type="normal"
           returns="number"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:number" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-val-float"
           code="#{0} = #{1};"
           spec="@vars.setvalue"
           help="@vars.setvalue.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:number" />
            </dropdown>
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-val-joint"
           code="#{0}"
           spec="@vars.getvalue"
           help="@vars.getvalue.help"
           type="normal"
           returns="joint"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:joint" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-val-joint"
           code="#{0} = #{1};"
           spec="@vars.setvalue"
           help="@vars.setvalue.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:joint" />
            </dropdown>
            <joint order="1" />
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-val-region"
           code="#{0}"
           spec="@vars.getvalue"
           help="@vars.getvalue.help"
           type="normal"
           returns="region"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:region" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-val-region"
           code="#{0} = #{1};"
           spec="@vars.setvalue"
           help="@vars.setvalue.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:region" />
            </dropdown>
            <region order="1" />
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-val-scene"
           code="#{0}"
           spec="@vars.getvalue"
           help="@vars.getvalue.help"
           type="normal"
           returns="scene"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:scene" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-val-scene"
           code="#{0} = getScene(#{1});"
           spec="@vars.setvalue"
           help="@vars.setvalue.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:scene" />
            </dropdown>
            <dropdown order="1">
                <choices supplier="resource:scene" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-val-sound"
           code="#{0}"
           spec="@vars.getvalue"
           help="@vars.getvalue.help"
           type="normal"
           returns="sound"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:sound" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-val-sound"
           code="#{0} = getSound(#{1});"
           spec="@vars.setvalue"
           help="@vars.setvalue.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:sound" />
            </dropdown>
            <dropdown order="1">
                <choices supplier="resource:sound" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-val-text"
           code="#{0}"
           spec="@vars.getvalue"
           help="@vars.getvalue.help"
           type="normal"
           returns="text"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:text" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-val-text"
           code="#{0} = #{1};"
           spec="@vars.setvalue"
           help="@vars.setvalue.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="https://www.stencyl.com/help/view/attributes/"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:text" />
            </dropdown>
            <text order="1" />
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="hasvalue"
           code="hasValue(#{0})"
           spec="@vars.hasvalue"
           help="@vars.hasvalue.help"
           type="normal"
           returns="boolean"
           category="attributes"
           helpURL="attributes-func"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:any" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="hasnovalue"
           code="!hasValue(#{0})"
           spec="@vars.hasnovalue"
           help="@vars.hasnovalue.help"
           type="normal"
           returns="boolean"
           category="attributes"
           helpURL="attributes-func"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:any" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-game-att-num"
           code="setGameAttribute(#{0}, #{1});"
           spec="@vars.game.set.num"
           help="@vars.game.set.num.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="attributes-game"
           deprecated="true">
        <fields>
            <text order="0" />
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-game-att-text"
           code="setGameAttribute(#{0}, #{1});"
           spec="@vars.game.set.text"
           help="@vars.game.set.text.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="attributes-game"
           deprecated="true">
        <fields>
            <text order="0" />
            <text order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-game-att-bool"
           code="setGameAttribute(#{0}, #{1});"
           spec="@vars.game.set.bool"
           help="@vars.game.set.bool.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="attributes-game"
           deprecated="true">
        <fields>
            <text order="0" />
            <boolean order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-game-att-list"
           code="setGameAttribute(#{0}, #{1});"
           spec="@vars.game.set.list"
           help="@vars.game.set.list.help"
           type="action"
           returns="void"
           category="attributes"
           helpURL="attributes-game"
           deprecated="true">
        <fields>
            <text order="0" />
            <list order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-game-att-num"
           code="(getGameAttribute(#{0}) as Number)"
           spec="@vars.game.get.num"
           help="@vars.game.get.num.help"
           type="normal"
           returns="number"
           category="attributes"
           helpURL="attributes-game"
           deprecated="true">
        <fields>
            <text order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-game-att-text"
           code="(getGameAttribute(#{0}))"
           spec="@vars.game.get.text"
           help="@vars.game.get.text.help"
           type="normal"
           returns="text"
           category="attributes"
           helpURL="attributes-game"
           deprecated="true">
        <fields>
            <text order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-game-att-bool"
           code="(getGameAttribute(#{0}) as Boolean)"
           spec="@vars.game.get.bool"
           help="@vars.game.get.bool.help"
           type="normal"
           returns="boolean"
           category="attributes"
           helpURL="attributes-game"
           deprecated="true">
        <fields>
            <text order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-game-att-list"
           code="getGameAttribute(#{0})"
           spec="@vars.game.get.list"
           help="@vars.game.get.list.help"
           type="normal"
           returns="list"
           category="attributes"
           helpURL="attributes-game"
           deprecated="true">
        <fields>
            <text order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-item-number"
           code="Std.parseFloat(#{0}[#{1}])"
           spec="@vars.list.get.number"
           help="@vars.list.get.number.help"
           type="normal"
           returns="number"
           category="attributes"
           helpURL="attributes-lists"
           deprecated="true">
        <fields>
            <list order="0" />
            <int order="1" />
        </fields>
    </block>

    <block tag="get-item-text"
           code="(#{0}[#{1}])"
           spec="@vars.list.get.text"
           help="@vars.list.get.text.help"
           type="normal"
           returns="text"
           category="attributes"
           helpURL="attributes-lists"
           deprecated="true">
        <fields>
            <list order="0" />
            <int order="1" />
        </fields>
    </block>

    <block tag="get-game-att"
           code="(getGameAttribute(#{0}))"
           spec="@vars.game.get"
           help="@vars.game.get.help"
           type="normal"
           returns="anything"
           category="gattributes"
           helpURL="attributes-game">
        <fields>
            <text order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-game-att"
           code="setGameAttribute(#{0}, #{1});"
           spec="@vars.game.set"
           help="@vars.game.set.help"
           type="action"
           returns="void"
           category="gattributes"
           helpURL="attributes-game">
        <fields>
            <text order="0" />
            <anything order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-game-att-save"
           code="setSavable(#{0}, #{1});"
           spec="@vars.game.set.save"
           help="@vars.game.set.save.help"
           type="action"
           returns="void"
           category="gattributes"
           helpURL="attributes-game">
        <fields>
            <text order="0" />
            <dropdown order="1" id="enableDisableTF" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="restore-game-attributes"
           code="engine.restoreGameAttributes();"
           spec="@vars.game.restore"
           help="@vars.game.restore.help"
           type="action"
           returns="void"
           category="gattributes"
           helpURL="attributes-game">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="keystate"
           code="isKey#{0}(#{1})"
           spec="@in.keystate"
           help="@in.keystate.help"
           type="normal"
           returns="boolean"
           category="input"
           helpURL="input-keymouse">
        <fields>
            <dropdown order="0" id="downPressRelease" />
            <control order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="is-special-down"
           code="is#{0}Down()"
           spec="@in.specialdown"
           help="@in.specialdown.help"
           type="normal"
           returns="boolean"
           category="input"
           helpURL="input-keymouse">
        <fields>
            <dropdown order="0" id="shiftCtrl" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="simulate-key"
           code="simulateKey#{0}(#{1});"
           spec="@in.simulate.key"
           help="@in.simulate.key.help"
           type="action"
           returns="void"
           category="input"
           helpURL="input-keymouse">
        <fields>
            <dropdown order="0" id="pressRelease" />
            <control order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="keycode"
           code="Key.#{0}"
           spec="@in.keycode"
           help="@in.keycode.help"
           type="normal"
           returns="int"
           category="input"
           helpURL="input-keymouse">
        <fields>
            <dropdown order="0" id="key" />
        </fields>
    </block>

    <block tag="mousestate"
           code="isMouse#{0}()"
           spec="@in.mousestate"
           help="@in.mousestate.help"
           type="normal"
           returns="boolean"
           category="input"
           helpURL="input-keymouse">
        <fields>
            <dropdown order="0" id="downPressRelease" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="amousestate"
           code="#{0}.isMouse#{1}()"
           spec="@in.amousestate"
           help="@in.amousestate.help"
           type="normal"
           returns="boolean"
           category="input"
           helpURL="input-keymouse">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="mouseActor" />
        </fields>
    </block>

    <block tag="mousexy"
           code="getMouse#{0}#{1}()"
           spec="@in.mousexy"
           help="@in.mousexy.help"
           type="normal"
           returns="number"
           category="input"
           helpURL="input-keymouse">
        <fields>
            <dropdown order="0" id="mouseLocations" />
            <dropdown order="1" id="xy" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="mousedisp"
           code="#{0}Cursor();"
           spec="@in.mousedisp"
           help="@in.mousedisp.help"
           type="action"
           returns="void"
           category="input"
           helpURL="input-keymouse">
        <fields>
            <dropdown order="0" id="showHide" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="enable-gamepad"
           code="Input.enableJoystick();"
           spec="@in.gamepad.enable"
           help="@in.gamepad.enable.help"
           type="action"
           returns="void"
           category="input"
           helpURL="input-gamepad"
           deprecated="true">
    </block>

    <block tag="map-gamepad-control"
           code="Input.mapJoystickButton(#{0}, #{1});"
           spec="@in.gamepad.map"
           help="@in.gamepad.map.help"
           type="action"
           returns="void"
           category="input"
           helpURL="input-gamepad">
        <fields>
            <text order="0" />
            <control order="1" />
        </fields>
    </block>

    <block tag="unmap-gamepad-button"
           code="Input.unmapJoystickButton(#{0});"
           spec="@in.gamepad.unmap.button"
           help="@in.gamepad.unmap.button.help"
           type="action"
           returns="void"
           category="input"
           helpURL="input-gamepad">
        <fields>
            <text order="0" />
        </fields>
    </block>

    <block tag="unmap-gamepad-control"
           code="Input.unmapJoystickFromControl(#{0});"
           spec="@in.gamepad.unmap.control"
           help="@in.gamepad.unmap.control.help"
           type="action"
           returns="void"
           category="input"
           helpURL="input-gamepad">
        <fields>
            <control order="0" />
        </fields>
    </block>

    <block tag="set-gamepad-sensitivity"
           code="Input.setJoySensitivity(#{0} / 100);"
           spec="@in.gamepad.sensitivity"
           help="@in.gamepad.sensitivity.help"
           type="action"
           returns="void"
           category="input"
           helpURL="input-gamepad">
        <fields>
            <number order="0" />
        </fields>
    </block>

    <block tag="get-button-pressure"
           code="Input.getButtonPressure(#{0})"
           spec="@in.gamepad.pressure"
           help="@in.gamepad.pressure.help"
           type="normal"
           returns="number"
           category="input"
           helpURL="input-gamepad">
        <fields>
            <control order="0" />
        </fields>
    </block>

    <block tag="save-gamepad-config"
           code="Input.saveJoystickConfig(#{0});"
           spec="@in.gamepad.saveconfig"
           help="@in.gamepad.saveconfig.help"
           type="action"
           returns="void"
           category="input"
           helpURL="input-gamepad">
        <fields>
            <text order="0" />
        </fields>
    </block>

    <block tag="load-gamepad-config"
           code="Input.loadJoystickConfig(#{0});"
           spec="@in.gamepad.loadconfig"
           help="@in.gamepad.loadconfig.help"
           type="action"
           returns="void"
           category="input"
           helpURL="input-gamepad">
        <fields>
            <text order="0" />
        </fields>
    </block>

    <block tag="accelerometer"
           code="Input.accel#{0}"
           spec="@in.accelerometer"
           help="@in.accelerometer.help"
           type="normal"
           returns="number"
           category="mobile"
           helpURL="input-mobile">
        <fields>
            <dropdown order="0" id="xyz" />
        </fields>
    </block>

    <block tag="swipe-detect"
           code="Input.swiped#{0}"
           spec="@in.swipe.detect"
           help="@in.swipe.detect.help"
           type="normal"
           returns="boolean"
           category="mobile"
           helpURL="input-mobile">
        <fields>
            <dropdown order="0" id="upDownLeftRight" />
        </fields>
    </block>

    <block tag="began-dragged-released-touch"
           code="isMouse#{0}()"
           spec="@in.begandraggedreleasedtouch"
           help="@in.begandraggedreleasedtouch.help"
           type="normal"
           returns="boolean"
           category="mobile"
           helpURL="input-keymouse"
           deprecated="true">
        <fields>
            <dropdown order="0" id="touchedDraggedReleased" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="touch-drag-release"
           code="getMouse#{0}#{1}()"
           spec="@in.touchdragrelease"
           help="@in.touchdragrelease.help"
           type="normal"
           returns="number"
           category="mobile"
           helpURL="input-keymouse"
           deprecated="true">
        <fields>
            <dropdown order="0" id="touchDragRelease" />
            <dropdown order="1" id="xy" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="touch-drag-release-actor"
           code="#{0}.isMouse#{1}()"
           spec="@in.touchdragreleaseactor"
           help="@in.touchdragreleaseactor.help"
           type="normal"
           returns="boolean"
           category="mobile"
           helpURL="input-keymouse"
           deprecated="true">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="touchedDraggedReleased2" />
        </fields>
    </block>

    <block tag="mousednew"
           code="#{0}isMouseDown()"
           spec="@in.mousednew"
           help="@in.mousednew.help"
           type="normal"
           returns="boolean"
           category="input"
           helpURL="input-keymouse"
           deprecated="true">
        <fields>
            <dropdown order="0" id="kupDown" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="mousep"
           code="#{0}isMousePressed()"
           spec="@in.mousep"
           help="@in.mousep.help"
           type="normal"
           returns="boolean"
           category="input"
           helpURL="input-keymouse"
           deprecated="true">
        <fields>
            <dropdown order="0" id="inputPress" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="mouser"
           code="#{0}isMouseReleased()"
           spec="@in.mouser"
           help="@in.mouser.help"
           type="normal"
           returns="boolean"
           category="input"
           helpURL="input-keymouse"
           deprecated="true">
        <fields>
            <dropdown order="0" id="inputRelease" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="keydown2new"
           code="#{0}isKeyDown(#{1})"
           spec="@in.keydown2new"
           help="@in.keydown2new.help"
           type="normal"
           returns="boolean"
           category="input"
           helpURL="input-keymouse"
           deprecated="true">
        <fields>
            <dropdown order="0" id="kupDown" />
            <control order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="keypress2"
           code="#{0}isKeyPressed(#{1})"
           spec="@in.keypress2"
           help="@in.keypress2.help"
           type="normal"
           returns="boolean"
           category="input"
           helpURL="input-keymouse"
           deprecated="true">
        <fields>
            <dropdown order="0" id="inputPress" />
            <control order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="keyrelease2"
           code="#{0}isKeyReleased(#{1})"
           spec="@in.keyrelease2"
           help="@in.keyrelease2.help"
           type="normal"
           returns="boolean"
           category="input"
           helpURL="input-keymouse"
           deprecated="true">
        <fields>
            <dropdown order="0" id="inputRelease" />
            <control order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="amoused"
           code="#{0} == #{1}.isMouseDown()"
           spec="@in.amoused"
           help="@in.amoused.help"
           type="normal"
           returns="boolean"
           category="input"
           helpURL="input-keymouse"
           deprecated="true">
        <fields>
            <dropdown order="0" id="is" />
            <actor order="1" />
        </fields>
    </block>

    <block tag="amouseo"
           code="#{0}#{1}.isMouseOver()"
           spec="@in.amouseo"
           help="@in.amouseo.help"
           type="normal"
           returns="boolean"
           category="input"
           helpURL="input-keymouse"
           deprecated="true">
        <fields>
            <dropdown order="0" id="inputOver" />
            <actor order="1" />
        </fields>
    </block>

    <block tag="amouseh"
           code="#{0}#{1}.isMouseHover()"
           spec="@in.amouseh"
           help="@in.amouseh.help"
           type="normal"
           returns="boolean"
           category="input"
           helpURL="input-keymouse"
           deprecated="true">
        <fields>
            <dropdown order="0" id="inputHover" />
            <actor order="1" />
        </fields>
    </block>

    <block tag="amousep"
           code="#{0}#{1}.isMousePressed()"
           spec="@in.amousep"
           help="@in.amousep.help"
           type="normal"
           returns="boolean"
           category="input"
           helpURL="input-keymouse"
           deprecated="true">
        <fields>
            <dropdown order="0" id="inputPress" />
            <actor order="1" />
        </fields>
    </block>

    <block tag="amouser"
           code="#{0}#{1}.isMouseReleased()"
           spec="@in.amouser"
           help="@in.amouser.help"
           type="normal"
           returns="boolean"
           category="input"
           helpURL="input-keymouse"
           deprecated="true">
        <fields>
            <dropdown order="0" id="inputRelease" />
            <actor order="1" />
        </fields>
    </block>

    <block tag="swipe-show-hide"
           code="/*Input.#{0}SwipeDetection();*/"
           spec="@in.swipe.toggle"
           help="@in.swipe.toggle.help"
           type="action"
           returns="void"
           category="mobile"
           helpURL="null"
           deprecated="true">
        <fields>
            <dropdown order="0" id="enableDisable" />
        </fields>
    </block>

    <block tag="num-touches"
           code="Input.numTouches"
           spec="@in.numtouches"
           help="@in.numtouches.help"
           type="normal"
           returns="number"
           category="mobile"
           helpURL="input-mobile"
           deprecated="true">
    </block>

    <block tag="say"
           code="#{0}.say(#{1}, &quot;_customEvent_&quot; + #{2});"
           spec="@adv.say"
           help="@adv.say.help"
           type="action"
           returns="void"
           category="snippet"
           helpURL="behavior-trigs">
        <fields>
            <actor order="0" />
            <behavior order="1" />
            <text order="2" />
        </fields>
    </block>

    <block tag="shout"
           code="#{0}.shout(&quot;_customEvent_&quot; + #{1});"
           spec="@adv.shout"
           help="@adv.shout.help"
           type="action"
           returns="void"
           category="snippet"
           helpURL="behavior-trigs">
        <fields>
            <actor order="0" />
            <text order="1" />
        </fields>
    </block>

    <block tag="scene-say"
           code="sayToScene(#{0}, &quot;_customEvent_&quot; + #{1});"
           spec="@adv.scene.say"
           help="@adv.scene.say.help"
           type="action"
           returns="void"
           category="snippet"
           helpURL="behavior-trigs">
        <fields>
            <behavior order="0" />
            <text order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="scene-shout"
           code="shoutToScene(&quot;_customEvent_&quot; + #{0});"
           spec="@adv.scene.shout"
           help="@adv.scene.shout.help"
           type="action"
           returns="void"
           category="snippet"
           helpURL="behavior-trigs">
        <fields>
            <text order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="say-this"
           code="_customEvent_#{0:eventName}();"
           spec="@adv.saythis"
           help="@adv.saythis.help"
           type="action"
           returns="void"
           category="snippet"
           helpURL="behavior-trigs">
        <code>
            <block-message-appender id="eventName"
                addMessageToBuilder="false">
            </block-message-appender>
        </code>
        <fields>
            <code order="0" />
        </fields>
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-attribute"
           code="${attributeRef}"
           spec="@adv.getattribute"
           help="@adv.getattribute.help"
           type="normal"
           returns="anything"
           category="snippet"
           helpURL="behavior-atts">
        <fields>
            <actor order="0" />
            <behavior order="1" />
            <attribute order="2" />
        </fields>
    </block>

    <block tag="set-attribute"
           code="${attributeRef}"
           spec="@adv.setattribute"
           help="@adv.setattribute.help"
           type="action"
           returns="void"
           category="snippet"
           helpURL="behavior-atts">
        <fields>
            <actor order="0" />
            <behavior order="1" />
            <attribute order="2" />
            <anything order="3" />
        </fields>
    </block>

    <block tag="scene-get-attribute"
           code="${attributeRef}"
           spec="@adv.scene.getattribute"
           help="@adv.scene.getattribute.help"
           type="normal"
           returns="anything"
           category="snippet"
           helpURL="behavior-atts">
        <fields>
            <behavior order="0" />
            <attribute order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="scene-set-attribute"
           code="${attributeRef}"
           spec="@adv.scene.setattribute"
           help="@adv.scene.setattribute.help"
           type="action"
           returns="void"
           category="snippet"
           helpURL="behavior-atts">
        <fields>
            <behavior order="0" />
            <attribute order="1" />
            <anything order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="is-snippet-enableda"
           code="#{0}.isBehaviorEnabled(#{1})"
           spec="@adv.snippet.isenableda"
           help="@adv.snippet.isenableda.help"
           type="normal"
           returns="boolean"
           category="snippet"
           helpURL="behavior-state">
        <fields>
            <actor order="0" />
            <behavior order="1" />
        </fields>
    </block>

    <block tag="is-snippet-enabled"
           code="isBehaviorEnabledForScene(#{0})"
           spec="@adv.snippet.isenabled"
           help="@adv.snippet.isenabled.help"
           type="normal"
           returns="boolean"
           category="snippet"
           helpURL="behavior-state">
        <fields>
            <behavior order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="actor-enabledisable-snippet"
           code="#{0}.#{1}Behavior(#{2});"
           spec="@adv.snippet.actor.enabledisable"
           help="@adv.snippet.actor.enabledisable.help"
           type="action"
           returns="void"
           category="snippet"
           helpURL="behavior-state">
        <fields>
            <actor order="0" />
            <dropdown order="1" id="enableDisable" />
            <behavior order="2" />
        </fields>
    </block>

    <block tag="scene-enabledisable-snippet"
           code="#{0}BehaviorForScene(#{1});"
           spec="@adv.scene.snippet.enabledisable"
           help="@adv.scene.snippet.enabledisable.help"
           type="action"
           returns="void"
           category="snippet"
           helpURL="behavior-state">
        <fields>
            <dropdown order="0" id="enableDisable" />
            <behavior order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="disable-snippet"
           code="disableThisBehavior();"
           spec="@adv.snippet.disable"
           help="@adv.snippet.disable.help"
           type="action"
           returns="void"
           category="snippet"
           helpURL="behavior-state">
        <context>
            <requiredContext type="class" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="has-snippet"
           code="#{0}.hasBehavior(#{1})"
           spec="@adv.hassnippet"
           help="@adv.hassnippet.help"
           type="normal"
           returns="boolean"
           category="snippet"
           helpURL="behavior-state">
        <fields>
            <actor order="0" />
            <behavior order="1" />
        </fields>
    </block>

    <block tag="scene-has-snippet"
           code="sceneHasBehavior(#{0})"
           spec="@adv.scene.hassnippet"
           help="@adv.scene.hassnippet.help"
           type="normal"
           returns="boolean"
           category="snippet"
           helpURL="behavior-state">
        <fields>
            <behavior order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="enable-snippet"
           code="#{0}.enableBehavior(#{1});"
           spec="@adv.snippet.enable"
           help="@adv.snippet.enable.help"
           type="action"
           returns="void"
           category="snippet"
           helpURL="behavior-state"
           deprecated="true">
        <fields>
            <actor order="0" />
            <text order="1" />
        </fields>
    </block>

    <block tag="disable-snippet2"
           code="#{0}.disableBehavior(#{1});"
           spec="@adv.snippet.disable2"
           help="@adv.snippet.disable2.help"
           type="action"
           returns="void"
           category="snippet"
           helpURL="behavior-state"
           deprecated="true">
        <fields>
            <actor order="0" />
            <text order="1" />
        </fields>
    </block>

    <block tag="scene-enable-snippet"
           code="enableBehaviorForScene(#{0});"
           spec="@adv.scene.snippet.enable"
           help="@adv.scene.snippet.enable.help"
           type="action"
           returns="void"
           category="snippet"
           helpURL="behavior-state"
           deprecated="true">
        <fields>
            <text order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="scene-disable-snippet"
           code="disableBehaviorForScene(#{0});"
           spec="@adv.scene.snippet.disable"
           help="@adv.scene.snippet.disable.help"
           type="action"
           returns="void"
           category="snippet"
           helpURL="behavior-state"
           deprecated="true">
        <fields>
            <text order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="scene-snip-order"
           code="updateSnippetOrder(#{0}, #{1}, #{2});"
           spec="@adv.snippet.scene.order"
           help="@adv.snippet.scene.order.help"
           type="action"
           returns="void"
           category="snippet"
           helpURL="behavior-state"
           deprecated="true">
        <fields>
            <text order="0" />
            <number order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="show-browser"
           code="openURLInBrowser(#{0});"
           spec="@web.browser"
           help="@web.browser.help"
           type="action"
           returns="void"
           category="game"
           helpURL="game-web">
        <fields>
            <text order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="visit-site-response"
           code="cast(event.target, URLLoader).data"
           spec="@web.visit.response"
           help="@web.visit.response.help"
           type="normal"
           returns="text"
           category="game"
           hidden="true"
           helpURL="game-web">
        <context>
            <requiredContext type="has" value="event:openfl.events.Event" />
        </context>
    </block>

    <block tag="visit-site"
           code="visitURL(#{0}, function(event:Event):Void&#10;{&#10;#{1}&#10;});"
           spec="@web.visit"
           help="@web.visit.help"
           type="wrapper"
           returns="void"
           category="game"
           helpURL="game-web">
        <fields>
            <text order="0" />
            <code-block order="1" />
            <attached-block order="2" tag="visit-site-response" />
        </fields>
        <context>
            <innerContext type="has" value="event:openfl.events.Event" />
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="visit-site-post"
           code="postToURL(#{0}, #{1}, function(event:Event):Void&#10;{&#10;#{2}&#10;});"
           spec="@web.post"
           help="@web.post.help"
           type="wrapper"
           returns="void"
           category="game"
           helpURL="game-web">
        <fields>
            <text order="0" />
            <text order="1" />
            <code-block order="2" />
            <attached-block order="3" tag="visit-site-response" />
        </fields>
        <context>
            <innerContext type="has" value="event:openfl.events.Event" />
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="save-success"
           code="success"
           spec="@scene.savesuccess"
           help="@scene.savesuccess.help"
           type="normal"
           returns="boolean"
           category="scene"
           hidden="true"
           helpURL="game-saving">
        <context>
            <requiredContext type="has" value="event:openfl.events.Event" />
        </context>
    </block>

    <block tag="save-game"
           code="saveGame(&quot;mySave&quot;, function(success:Bool):Void&#10;{&#10;#{0}&#10;});"
           spec="@scene.savegame"
           help="@scene.savegame.help"
           type="wrapper"
           returns="void"
           category="scene"
           helpURL="game-saving">
        <fields>
            <code-block order="0" />
            <attached-block order="1" tag="save-success" />
        </fields>
        <context>
            <innerContext type="has" value="event:openfl.events.Event" />
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="load-success"
           code="success"
           spec="@scene.loadsuccess"
           help="@scene.loadsuccess.help"
           type="normal"
           returns="boolean"
           category="scene"
           hidden="true"
           helpURL="game-saving">
        <context>
            <requiredContext type="has" value="event:openfl.events.Event" />
        </context>
    </block>

    <block tag="load-game"
           code="loadGame(&quot;mySave&quot;, function(success:Bool):Void&#10;{&#10;#{0}&#10;});"
           spec="@scene.loadgame"
           help="@scene.loadgame.help"
           type="wrapper"
           returns="void"
           category="scene"
           helpURL="game-saving">
        <fields>
            <code-block order="0" />
            <attached-block order="1" tag="load-success" />
        </fields>
        <context>
            <innerContext type="has" value="event:openfl.events.Event" />
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-screen-wh"
           code="Config.stageWidth = #{0};&#10;Config.stageHeight = #{1};&#10;engine.reloadScreen();"
           spec="@scene.setscreenwh"
           help="@scene.setscreenwh.help"
           type="action"
           returns="void"
           category="game"
           helpURL="game-screen">
        <fields>
            <int order="0" />
            <int order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="screen-wh"
           code="getScreen#{0}()"
           spec="@scene.screenwh"
           help="@scene.screenwh.help"
           type="normal"
           returns="int"
           category="game"
           helpURL="game-screen">
        <fields>
            <dropdown order="0" id="widthHeight" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="is-fullscreen"
           code="engine.isInFullScreen()"
           spec="@scene.isfullscreen"
           help="@scene.isfullscreen.help"
           type="normal"
           returns="boolean"
           category="game"
           helpURL="game-screen">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-fullscreen"
           code="engine.setFullScreen(#{0});"
           spec="@scene.setfullscreen"
           help="@scene.setfullscreen.help"
           type="action"
           returns="void"
           category="game"
           helpURL="game-screen">
        <fields>
            <boolean order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="toggle-fullscreen"
           code="toggleFullScreen();"
           spec="@scene.toggle.fullscreen"
           help="@scene.toggle.fullscreen.help"
           type="action"
           returns="void"
           category="game"
           helpURL="game-screen">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-windowscale"
           code="Config.gameScale = #{0};&#10;engine.reloadScreen();"
           spec="@scene.setwindowscale"
           help="@scene.setwindowscale.help"
           type="action"
           returns="void"
           category="game"
           helpURL="game-screen">
        <fields>
            <number order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-windowscale"
           code="Config.gameScale"
           spec="@scene.getwindowscale"
           help="@scene.getwindowscale.help"
           type="normal"
           returns="number"
           category="game"
           helpURL="game-screen">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-scalemode"
           code="Config.scaleMode = #{0};"
           spec="@scene.setscalemode"
           help="@scene.setscalemode.help"
           type="action"
           returns="void"
           category="game"
           helpURL="game-screen">
        <fields>
            <int order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-scalemode"
           code="Config.scaleMode"
           spec="@scene.getscalemode"
           help="@scene.getscalemode.help"
           type="normal"
           returns="int"
           category="game"
           helpURL="game-screen">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="scalemode"
           code="#{0}"
           spec="@scene.scalemode"
           help="@scene.scalemode.help"
           type="normal"
           returns="int"
           category="game"
           helpURL="game-screen">
        <fields>
            <dropdown order="0" id="scaleMode" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="engine-scale"
           code="Engine.SCALE"
           spec="@adv.enginescale"
           help="@adv.enginescale.help"
           type="normal"
           returns="number"
           category="game"
           helpURL="game-screen">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="saveload-success"
           code="success"
           spec="@scene.saveloadsuccess"
           help="@scene.saveloadsuccess.help"
           type="normal"
           returns="boolean"
           category="scene"
           helpURL="game-saving"
           deprecated="true">
        <context>
            <requiredContext type="has" value="event:openfl.events.Event" />
        </context>
    </block>

    <block tag="curr-player-name"
           code="getPlayerName()"
           spec="@game.user.currname"
           help="@game.user.currname.help"
           type="normal"
           returns="text"
           category="game"
           helpURL="blocks/game/Players/players.html"
           deprecated="true">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="draw-text"
           code="g.drawString(#{0:objectToString}, #{1}, #{2});"
           spec="@draw.drawtext"
           help="@draw.drawtext.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main">
        <fields>
            <anything order="0" />
            <number order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="draw-line"
           code="g.drawLine(#{0}, #{1}, #{2}, #{3});"
           spec="@draw.drawline"
           help="@draw.drawline.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main">
        <fields>
            <number order="0" />
            <number order="1" />
            <number order="2" />
            <number order="3" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="draw-pixel"
           code="g.fillPixel(#{0}, #{1});"
           spec="@draw.drawpixel"
           help="@draw.drawpixel.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="draw-image-actor"
           code="#{0}.drawImage(g);"
           spec="@draw.drawimagea"
           help="@draw.drawimagea.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main">
        <fields>
            <actor order="0" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="drawfill-rect"
           code="g.#{0}Rect(#{1}, #{2}, #{3}, #{4});"
           spec="@draw.drawfillrect"
           help="@draw.drawfillrect.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main">
        <fields>
            <dropdown order="0" id="drawFill" />
            <number order="1" />
            <number order="2" />
            <number order="3" />
            <number order="4" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="drawfill-roundrect"
           code="g.#{0}RoundRect(#{1}, #{2}, #{3}, #{4}, #{5});"
           spec="@draw.drawfillroundrect"
           help="@draw.drawfillroundrect.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main">
        <fields>
            <dropdown order="0" id="drawFill" />
            <number order="1" />
            <number order="2" />
            <number order="3" />
            <number order="4" />
            <number order="5" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="drawfill-circle"
           code="g.#{0}Circle(#{1}, #{2}, #{3});"
           spec="@draw.drawfillcircle"
           help="@draw.drawfillcircle.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main">
        <fields>
            <dropdown order="0" id="drawFill" />
            <number order="1" />
            <number order="2" />
            <number order="3" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="drawfill-poly"
           code="g.begin#{0}Polygon();&#10;#{1}&#10;g.endDrawingPolygon();"
           spec="@draw.drawfillpoly"
           help="@draw.drawfillpoly.help"
           type="wrapper"
           returns="void"
           category="drawing"
           helpURL="drawing-main">
        <fields>
            <dropdown order="0" id="drawFill2" />
            <code-block order="1" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="add-to-poly"
           code="g.addPointToPolygon(#{0}, #{1});"
           spec="@draw.addtopoly"
           help="@draw.addtopoly.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="draw-shape"
           code="g.beginDrawingShape(#{0});&#10;#{1}&#10;g.endDrawingShape();"
           spec="draw a shape: %0"
           type="wrapper"
           returns="void"
           category="drawing">
        <fields>
            <anything order="0" />
            <code-block order="1" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="new-shape"
           code="new openfl.display.Shape()"
           spec="new shape"
           type="normal"
           returns="anything"
           category="drawing">
        <fields/>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="set-color"
           code="g.fillColor = Utils.convertColor(#{0});"
           spec="@draw.setcolor"
           help="@draw.setcolor.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-styles">
        <fields>
            <color order="0" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="set-font-new"
           code="g.setFont(#{0});"
           spec="@draw.setfont"
           help="@draw.setfont.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-styles">
        <fields>
            <font order="0" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="letter-spacing"
           code="#{0}.letterSpacing = #{1};"
           spec="@draw.setspacing"
           help="@draw.setspacing.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-styles">
        <fields>
            <font order="0" />
            <int order="1" />
        </fields>
    </block>

    <block tag="set-alpha"
           code="g.alpha = (#{0}/100);"
           spec="@draw.setalpha"
           help="@draw.setalpha.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-styles">
        <fields>
            <number order="0" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="set-stroke-color"
           code="g.strokeColor = #{0};"
           spec="@draw.stroke.setcolor"
           help="@draw.stroke.setcolor.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-styles">
        <fields>
            <color order="0" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="set-thickness"
           code="g.strokeSize = #{0};"
           spec="@draw.stroke.setthickness"
           help="@draw.stroke.setthickness.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-styles">
        <fields>
            <int order="0" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="get-font-width"
           code="g.font.getTextWidth(#{0})/Engine.SCALE"
           spec="@draw.getfontwidth"
           help="@draw.getfontwidth.help"
           type="normal"
           returns="number"
           category="text"
           helpURL="drawing-styles">
        <fields>
            <text order="0" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="get-font-width2-new"
           code="#{0}.getTextWidth(#{1})/Engine.SCALE"
           spec="@draw.getfontwidth2"
           help="@draw.getfontwidth2.help"
           type="normal"
           returns="number"
           category="text"
           helpURL="drawing-styles">
        <fields>
            <font order="0" />
            <text order="1" />
        </fields>
    </block>

    <block tag="get-font-height"
           code="g.font.getHeight()/Engine.SCALE"
           spec="@draw.getfontheight"
           help="@draw.getfontheight.help"
           type="normal"
           returns="number"
           category="text"
           helpURL="drawing-styles">
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="get-font-height2-new"
           code="#{0}.getHeight()/Engine.SCALE"
           spec="@draw.getfontheight2"
           help="@draw.getfontheight2.help"
           type="normal"
           returns="number"
           category="text"
           helpURL="drawing-styles">
        <fields>
            <font order="0" />
        </fields>
    </block>

    <block tag="draw-transtoby"
           code="g.#{0}(#{1}, #{2});"
           spec="@draw.transtoby"
           help="@draw.transtoby.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-transforms">
        <fields>
            <dropdown order="0" id="transToBy" />
            <number order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="to-screen-space"
           code="g.translateToScreen();"
           spec="@draw.toscreenspace"
           help="@draw.toscreenspace.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-transforms">
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="to-local-space"
           code="g.translateToActor(#{0});"
           spec="@draw.tolocalspace"
           help="@draw.tolocalspace.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-transforms">
        <fields>
            <actor order="0" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="set-drawing-layer"
           code="Script.setDrawingLayer(#{0:layerRef});"
           spec="@draw.drawinglayer"
           help="@draw.drawinglayer.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-transforms">
        <fields>
            <dropdown order="0" id="layerIDs" />
            <anything order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-drawing-layer-scene"
           code="Script.setDrawingLayerToSceneLayer();"
           spec="@draw.drawinglayer.scene"
           help="@draw.drawinglayer.scene.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-transforms">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-drawing-layer-actor"
           code="Script.setDrawingLayerToActorLayer(#{0});"
           spec="@draw.drawinglayer.actor"
           help="@draw.drawinglayer.actor.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-transforms">
        <fields>
            <actor order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="draw-rect"
           code="g.drawRect(#{0}, #{1}, #{2}, #{3});"
           spec="@draw.drawrect"
           help="@draw.drawrect.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main"
           deprecated="true">
        <fields>
            <number order="0" />
            <number order="1" />
            <number order="2" />
            <number order="3" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="fill-rect"
           code="g.fillRect(#{0}, #{1}, #{2}, #{3});"
           spec="@draw.fillrect"
           help="@draw.fillrect.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main"
           deprecated="true">
        <fields>
            <number order="0" />
            <number order="1" />
            <number order="2" />
            <number order="3" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="draw-roundrect"
           code="g.drawRoundRect(#{0}, #{1}, #{2}, #{3}, #{4});"
           spec="@draw.drawroundrect"
           help="@draw.drawroundrect.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main"
           deprecated="true">
        <fields>
            <number order="0" />
            <number order="1" />
            <number order="2" />
            <number order="3" />
            <number order="4" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="fill-roundrect"
           code="g.fillRoundRect(#{0}, #{1}, #{2}, #{3}, #{4});"
           spec="@draw.fillroundrect"
           help="@draw.fillroundrect.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main"
           deprecated="true">
        <fields>
            <number order="0" />
            <number order="1" />
            <number order="2" />
            <number order="3" />
            <number order="4" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="draw-circle"
           code="g.drawCircle(#{0}, #{1}, #{2});"
           spec="@draw.drawcircle"
           help="@draw.drawcircle.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main"
           deprecated="true">
        <fields>
            <number order="0" />
            <number order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="fill-circle"
           code="g.fillCircle(#{0}, #{1}, #{2});"
           spec="@draw.fillcircle"
           help="@draw.fillcircle.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main"
           deprecated="true">
        <fields>
            <number order="0" />
            <number order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="begin-drawfill-poly"
           code="g.begin#{0}Polygon();"
           spec="@draw.begindrawfillpoly"
           help="@draw.begindrawfillpoly.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main"
           deprecated="true">
        <fields>
            <dropdown order="0" id="drawFill2" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="begin-draw-poly"
           code="g.beginDrawPolygon();"
           spec="@draw.begindrawpoly"
           help="@draw.begindrawpoly.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main"
           deprecated="true">
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="begin-fill-poly"
           code="g.beginFillPolygon();"
           spec="@draw.beginfillpoly"
           help="@draw.beginfillpoly.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main"
           deprecated="true">
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="end-poly"
           code="g.endDrawingPolygon();"
           spec="@draw.endfillpoly"
           help="@draw.endfillpoly.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-main"
           deprecated="true">
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="set-color2"
           code="g.fillColor = #{0};"
           spec="@draw.setcolor"
           help="@draw.setcolor.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-styles"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:color" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="set-stroke-color2"
           code="g.strokeColor = #{0};"
           spec="@draw.stroke.setcolor"
           help="@draw.stroke.setcolor.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-styles"
           deprecated="true">
        <fields>
            <dropdown order="0">
                <choices supplier="var:color" />
            </dropdown>
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="get-color"
           code="g.fillColor"
           spec="@draw.getcolor"
           help="@draw.getcolor.help"
           type="normal"
           returns="color"
           category="drawing"
           helpURL="drawing-styles"
           deprecated="true">
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="get-font"
           code="g.font"
           spec="@draw.getfont"
           help="@draw.getfont.help"
           type="normal"
           returns="font"
           category="drawing"
           helpURL="drawing-styles"
           deprecated="true">
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="get-alpha"
           code="g.alpha"
           spec="@draw.getalpha"
           help="@draw.getalpha.help"
           type="normal"
           returns="number"
           category="drawing"
           helpURL="drawing-styles"
           deprecated="true">
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="get-blend"
           code="g.blendMode"
           spec="@draw.getblend"
           help="@draw.getblend.help"
           type="normal"
           returns="blend"
           category="drawing"
           helpURL="drawing-styles"
           deprecated="true">
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="set-blend"
           code="g.blendMode = #{0};"
           spec="@draw.setblend"
           help="@draw.setblend.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-styles"
           deprecated="true">
        <fields>
            <dropdown order="0" id="blend" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="translate"
           code="g.translate(#{0}, #{1});"
           spec="@draw.translate"
           help="@draw.translate.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-transforms"
           deprecated="true">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="translate-to"
           code="g.moveTo(#{0}, #{1});"
           spec="@draw.translateto"
           help="@draw.translateto.help"
           type="action"
           returns="void"
           category="drawing"
           helpURL="drawing-transforms"
           deprecated="true">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="has" value="g:com.stencyl.graphics.G" />
        </context>
    </block>

    <block tag="image-autoscale"
           code="imageApiAutoscale = #{0};"
           spec="@image.autoscale"
           help="@image.autoscale.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-main">
        <fields>
            <dropdown order="0" id="enableDisableTF" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-create"
           code="newImage(#{0}, #{1})"
           spec="@image.create"
           help="@image.create.help"
           type="normal"
           returns="image"
           category="image"
           helpURL="image-main">
        <fields>
            <int order="0" />
            <int order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-copy"
           code="#{0}.clone()"
           spec="@image.copy"
           help="@image.copy.help"
           type="normal"
           returns="image"
           category="image"
           helpURL="image-main">
        <fields>
            <image order="0" />
        </fields>
    </block>

    <block tag="image-subimage"
           code="getSubImage(#{0}, #{1}, #{2}, #{3}, #{4})"
           spec="@image.subimage"
           help="@image.subimage.help"
           type="normal"
           returns="image"
           category="image"
           helpURL="image-main">
        <fields>
            <image order="0" />
            <int order="1" />
            <int order="2" />
            <int order="3" />
            <int order="4" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-resize"
           code="resizeImage(#{0}, (#{1}/100), (#{2}/100), #{3})"
           spec="@image.resize"
           help="@image.resize.help"
           type="normal"
           returns="image"
           category="image"
           helpURL="image-main">
        <fields>
            <image order="0" />
            <number order="1" />
            <number order="2" />
            <dropdown order="3" id="scaleMethod" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-screen"
           code="captureScreenshot()"
           spec="@image.screen"
           help="@image.screen.help"
           type="normal"
           returns="image"
           category="image"
           helpURL="image-main">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-actor"
           code="getImageForActor(#{0})"
           spec="@image.actor"
           help="@image.actor.help"
           type="normal"
           returns="image"
           category="image"
           helpURL="image-main">
        <fields>
            <actor order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-file"
           code="getExternalImage(#{0})"
           spec="@image.file"
           help="@image.file.help"
           type="normal"
           returns="image"
           category="image"
           helpURL="image-main">
        <fields>
            <text order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-url-image"
           code="img"
           spec="@image.url.image"
           help="@image.url.image.help"
           type="normal"
           returns="image"
           category="image"
           hidden="true"
           helpURL="image-main">
        <context>
            <requiredContext type="has" value="img:openfl.display.BitmapData" />
        </context>
    </block>

    <block tag="image-url"
           code="loadImageFromURL(#{0}, function(img:BitmapData):Void&#10;{&#10;#{1}&#10;});"
           spec="@image.url"
           help="@image.url.help"
           type="wrapper"
           returns="void"
           category="image"
           helpURL="image-main">
        <fields>
            <text order="0" />
            <code-block order="1" />
            <attached-block order="2" tag="image-url-image" />
        </fields>
        <context>
            <innerContext type="has" value="img:openfl.display.BitmapData" />
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-to-text"
           code="imageToText(#{0})"
           spec="@image.to.text"
           help="@image.to.text.help"
           type="normal"
           returns="text"
           category="image"
           helpURL="image-main">
        <fields>
            <image order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-from-text"
           code="imageFromText(#{0})"
           spec="@image.from.text"
           help="@image.from.text.help"
           type="normal"
           returns="image"
           category="image"
           helpURL="image-main">
        <fields>
            <text order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-draw"
           code="drawImageOnImage(#{0}, #{1}, #{2}, #{3}, #{4});"
           spec="@image.data.image"
           help="@image.data.image.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-change">
        <fields>
            <image order="0" />
            <image order="1" />
            <int order="2" />
            <int order="3" />
            <dropdown order="4" id="blend" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-draw-text"
           code="drawTextOnImage(#{0}, #{1}, #{2}, #{3}, #{4});"
           spec="@image.data.text"
           help="@image.data.text.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-change">
        <fields>
            <image order="0" />
            <text order="1" />
            <int order="2" />
            <int order="3" />
            <font order="4" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-fill"
           code="fillImage(#{0}, #{1});"
           spec="@image.data.fill"
           help="@image.data.fill.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-change">
        <fields>
            <image order="0" />
            <color order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="rgb-to-color"
           code="Utils.getColorRGB(#{0}, #{1}, #{2})"
           spec="@image.rgb"
           help="@image.rgb.help"
           type="normal"
           returns="color"
           category="image"
           helpURL="image-change">
        <fields>
            <int order="0" />
            <int order="1" />
            <int order="2" />
        </fields>
    </block>

    <block tag="image-clear"
           code="clearImagePartially(#{0}, #{1}, #{2}, #{3}, #{4});"
           spec="@image.data.clear"
           help="@image.data.clear.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-change">
        <fields>
            <image order="0" />
            <int order="1" />
            <int order="2" />
            <int order="3" />
            <int order="4" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-clear-all"
           code="clearImage(#{0});"
           spec="@image.data.clearall"
           help="@image.data.clearall.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-change">
        <fields>
            <image order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-mask"
           code="#{0}(#{1}, #{2}, #{3}, #{4});"
           spec="@image.data.mask"
           help="@image.data.mask.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-change">
        <fields>
            <dropdown order="0" id="mask" />
            <image order="1" />
            <image order="2" />
            <int order="3" />
            <int order="4" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-filter"
           code="filterImage(#{0}, #{1});"
           spec="@image.data.filter"
           help="@image.data.filter.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-change">
        <fields>
            <image order="0" />
            <filter order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-flip"
           code="flipImage#{0}(#{1});"
           spec="@image.data.flip"
           help="@image.data.flip.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-change">
        <fields>
            <dropdown order="0" id="horizVert" />
            <image order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-swap"
           code="imageSwapColor(#{0}, #{1}, #{2});"
           spec="@image.data.swap"
           help="@image.data.swap.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-change">
        <fields>
            <image order="0" />
            <color order="1" />
            <color order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-wrapper"
           code="#{0}.lock();&#10;#{1}&#10;#{0}.unlock();"
           spec="@image.data.wrapper"
           help="@image.data.wrapper.help"
           type="wrapper"
           returns="void"
           category="image"
           helpURL="image-change">
        <fields>
            <image order="0" />
            <code-block order="1" />
        </fields>
    </block>

    <block tag="image-set-px"
           code="imageSetPixel(#{0}, #{1}, #{2}, #{3});"
           spec="@image.data.set.pixel"
           help="@image.data.set.pixel.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-change">
        <fields>
            <image order="0" />
            <int order="1" />
            <int order="2" />
            <color order="3" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-get-px"
           code="imageGetPixel(#{0}, #{1}, #{2})"
           spec="@image.data.get.pixel"
           help="@image.data.get.pixel.help"
           type="normal"
           returns="color"
           category="image"
           helpURL="image-change">
        <fields>
            <image order="0" />
            <int order="1" />
            <int order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-inst-create"
           code="new BitmapWrapper(new Bitmap(#{0}))"
           spec="@image.inst.create"
           help="@image.inst.create.help"
           type="normal"
           returns="image-instance"
           category="image"
           helpURL="image-show">
        <fields>
            <image order="0" />
        </fields>
    </block>

    <block tag="image-inst-actor"
           code="attachImageToActor(#{0}, #{1}, #{2}, #{3}, #{4});"
           spec="@image.inst.attach.actor"
           help="@image.inst.attach.actor.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show">
        <fields>
            <image-instance order="0" />
            <actor order="1" />
            <int order="2" />
            <int order="3" />
            <dropdown order="4" id="layersFrontBack" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-inst-layer2"
           code="attachImageToLayer(#{0}, cast #{1:layerRef}, #{3}, #{4}, #{5});"
           spec="@image.inst.attach.layer2"
           help="@image.inst.attach.layer2.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show">
        <fields>
            <image-instance order="0" />
            <dropdown order="1" id="layerIDs" />
            <anything order="2" />
            <int order="3" />
            <int order="4" />
            <dropdown order="5" id="layersFrontBack" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-inst-hud"
           code="attachImageToHUD(#{0}, #{1}, #{2});"
           spec="@image.inst.attach.screen"
           help="@image.inst.attach.screen.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show">
        <fields>
            <image-instance order="0" />
            <int order="1" />
            <int order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-inst-remove"
           code="removeImage(#{0});"
           spec="@image.inst.remove"
           help="@image.inst.remove.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show">
        <fields>
            <image-instance order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-set-z"
           code="setOrderForImage(#{0}, #{1});"
           spec="@image.set.z"
           help="@image.set.z.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show">
        <fields>
            <image-instance order="0" />
            <int order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-set-z-friendly"
           code="#{0}(#{1});"
           spec="@image.set.z2"
           help="@image.set.z2.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show">
        <fields>
            <dropdown order="0" id="setZ" />
            <image-instance order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-get-z"
           code="getOrderForImage(#{0})"
           spec="@image.get.z"
           help="@image.get.z.help"
           type="normal"
           returns="int"
           category="image"
           helpURL="image-show">
        <fields>
            <image-instance order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-set-props0"
           code="#{0}ForImage(#{1}, #{2});"
           spec="@image.set.props0"
           help="@image.set.props0.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show">
        <fields>
            <dropdown order="0" id="imageProps0" />
            <image-instance order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-set-props1"
           code="#{0}.#{1} = #{2};"
           spec="@image.set.props1"
           help="@image.set.props1.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show">
        <fields>
            <image-instance order="0" typeCheck="true" />
            <dropdown order="1" id="imageProps1" />
            <number order="2" />
        </fields>
    </block>

    <block tag="image-set-props2"
           code="#{0}.#{1} = (#{2}/100);"
           spec="@image.set.props2"
           help="@image.set.props2.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show">
        <fields>
            <image-instance order="0" typeCheck="true" />
            <dropdown order="1" id="imageProps2" />
            <number order="2" />
        </fields>
    </block>

    <block tag="image-origin"
           code="setOriginForImage(#{0}, #{1}, #{2});"
           spec="@image.set.origin"
           help="@image.set.origin.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show">
        <fields>
            <image-instance order="0" />
            <number order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-get-props"
           code="(#{0}.#{1})"
           spec="@image.get.props"
           help="@image.get.props.help"
           type="normal"
           returns="number"
           category="image"
           helpURL="image-show">
        <fields>
            <image-instance order="0" typeCheck="true" />
            <dropdown order="1" id="imageProps3" />
        </fields>
    </block>

    <block tag="image-tween-slide"
           code="moveImage#{0}(#{1}, #{2}, #{3}, #{4}, #{5});"
           spec="@image.movetoby"
           help="@image.movetoby.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show">
        <fields>
            <dropdown order="0" id="byTo" />
            <image-instance order="1" />
            <number order="2" />
            <number order="3" />
            <number order="4" />
            <dropdown order="5" id="easing" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-tween-spin"
           code="spinImage#{0}(#{1}, #{2}, #{3}, #{4});"
           spec="@image.spintoby"
           help="@image.spintoby.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show">
        <fields>
            <dropdown order="0" id="byTo" />
            <image-instance order="1" />
            <number order="2" />
            <number order="3" />
            <dropdown order="4" id="easing" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-tween-fade"
           code="fadeImageTo(#{0}, #{1} / 100, #{2}, #{3});"
           spec="@image.fadeto"
           help="@image.fadeto.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show">
        <fields>
            <image-instance order="0" />
            <number order="1" />
            <number order="2" />
            <dropdown order="3" id="easing" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-tween-scale"
           code="growImageTo(#{0}, #{1}/100, #{2}/100, #{3}, #{4});"
           spec="@image.scaleto"
           help="@image.scaleto.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show">
        <fields>
            <image-instance order="0" />
            <number order="1" />
            <number order="2" />
            <number order="3" />
            <dropdown order="4" id="easing" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-blend"
           code="#{0}.blendMode = #{1};"
           spec="@image.blend"
           help="@image.blend.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show">
        <fields>
            <image-instance order="0" typeCheck="true" />
            <dropdown order="1" id="blend" />
        </fields>
    </block>

    <block tag="image-apply-filter"
           code="setFilterForImage(#{0}, #{1});"
           spec="@image.filter"
           help="@image.filter.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show">
        <fields>
            <image-instance order="0" />
            <filter order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-clear-filter"
           code="clearFiltersForImage(#{0});"
           spec="@image.clearfilter"
           help="@image.clearfilter.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show">
        <fields>
            <image-instance order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="image-inst-layer"
           code="attachImageToLayer(#{0}, #{1}, #{2}, #{3}, #{4});"
           spec="@image.inst.attach.layer"
           help="@image.inst.attach.layer.help"
           type="action"
           returns="void"
           category="image"
           helpURL="image-show"
           deprecated="true">
        <fields>
            <image-instance order="0" />
            <int order="1" />
            <int order="2" />
            <int order="3" />
            <dropdown order="4" id="layersFrontBack" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="play-sound4"
           code="#{0}Sound(#{1});"
           spec="@ssound.playloop"
           help="@ssound.playloop.help"
           type="action"
           returns="void"
           category="sound"
           helpURL="sound-main">
        <fields>
            <dropdown order="0" id="playLoop" />
            <sound order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="stop-sounds"
           code="stopAllSounds();"
           spec="@ssound.stopall"
           help="@ssound.stopall.help"
           type="action"
           returns="void"
           category="sound"
           helpURL="sound-main">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-volume"
           code="setVolumeForAllSounds(#{0}/100);"
           spec="@ssound.vol"
           help="@ssound.vol.help"
           type="action"
           returns="void"
           category="sound"
           helpURL="sound-main">
        <fields>
            <number order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="fade-sounds"
           code="#{0}ForAllSounds(#{1});"
           spec="@ssound.fade"
           help="@ssound.fade.help"
           type="action"
           returns="void"
           category="sound"
           helpURL="sound-main">
        <fields>
            <dropdown order="0" id="fadeInOut" />
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="fade-sounds-percent"
           code="fadeForAllSounds(#{0}, #{1});"
           spec="@ssound.fadepercent"
           help="@ssound.fadepercent.help"
           type="action"
           returns="void"
           category="sound"
           helpURL="sound-main">
        <fields>
            <number order="0" />
            <number order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="play-sound-channel"
           code="#{0}SoundOnChannel(#{1}, #{2});"
           spec="@ssound.playloopchannel"
           help="@ssound.playloopchannel.help"
           type="action"
           returns="void"
           category="sound"
           helpURL="sound-main">
        <fields>
            <dropdown order="0" id="playLoop" />
            <sound order="1" />
            <int order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="control-sound-channel"
           code="#{0}SoundOnChannel(#{1});"
           spec="@ssound.controlchannel"
           help="@ssound.controlchannel.help"
           type="action"
           returns="void"
           category="sound"
           helpURL="sound-main">
        <fields>
            <dropdown order="0" id="soundPlayback" />
            <int order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-volume-channel"
           code="setVolumeForChannel(#{0}/100, #{1});"
           spec="@ssound.volchannel"
           help="@ssound.volchannel.help"
           type="action"
           returns="void"
           category="sound"
           helpURL="sound-main">
        <fields>
            <number order="0" />
            <int order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="fade-sound-channel"
           code="#{0}SoundOnChannel(#{1}, #{2});"
           spec="@ssound.fadechannel"
           help="@ssound.fadechannel.help"
           type="action"
           returns="void"
           category="sound"
           helpURL="sound-main">
        <fields>
            <dropdown order="0" id="fadeInOut" />
            <int order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="fade-sound-channel-percent"
           code="fadeSoundOnChannel(#{0}, #{1}, #{2});"
           spec="@ssound.fadechannelpercent"
           help="@ssound.fadechannelpercent.help"
           type="action"
           returns="void"
           category="sound"
           helpURL="sound-main">
        <fields>
            <int order="0" />
            <number order="1" />
            <number order="2" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-panning-channel"
           code="setPanningForChannel(#{0}/100, #{1});"
           spec="@ssound.panchannel"
           help="@ssound.panchannel.help"
           type="action"
           returns="void"
           category="sound"
           helpURL="sound-main">
        <fields>
            <number order="0" />
            <int order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-position-channel"
           code="getPositionForChannel(#{0})"
           spec="@ssound.getpos"
           help="@ssound.getpos.help"
           type="normal"
           returns="int"
           category="sound"
           helpURL="sound-main">
        <fields>
            <int order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="set-position-channel"
           code="setPositionForChannel(#{0}, #{1});"
           spec="@ssound.setpos"
           help="@ssound.setpos.help"
           type="action"
           returns="void"
           category="sound"
           helpURL="sound-main">
        <fields>
            <int order="0" />
            <int order="1" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-length-channel"
           code="getSoundLengthForChannel(#{0})"
           spec="@ssound.length"
           help="@ssound.length.help"
           type="normal"
           returns="int"
           category="sound"
           helpURL="sound-main">
        <fields>
            <int order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="get-length-sound"
           code="getSoundLength(#{0})"
           spec="@ssound.length2"
           help="@ssound.length2.help"
           type="normal"
           returns="int"
           category="sound"
           helpURL="sound-main">
        <fields>
            <sound order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="text-to-sound"
           code="getSoundByName(#{0})"
           spec="@ssound.texttosound"
           help="@ssound.texttosound.help"
           type="normal"
           returns="sound"
           category="sound"
           helpURL="sound-main">
        <fields>
            <text order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="play-sound3"
           code="if(#{0} != null) { playSound(#{0}); }"
           spec="@ssound.play"
           help="@ssound.play.help"
           type="action"
           returns="void"
           category="sound"
           helpURL="sound-main"
           deprecated="true">
        <fields>
            <sound order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="loop-sound3"
           code="if(#{0} != null) { loopSound(#{0}); }"
           spec="@ssound.loop"
           help="@ssound.loop.help"
           type="action"
           returns="void"
           category="sound"
           helpURL="sound-main"
           deprecated="true">
        <fields>
            <sound order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="fade-out"
           code="fadeOutForAllSounds((1000*#{0}));"
           spec="@ssound.fadeo"
           help="@ssound.fadeo.help"
           type="action"
           returns="void"
           category="sound"
           helpURL="sound-main"
           deprecated="true">
        <fields>
            <number order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="fade-in"
           code="fadeInForAllSounds((1000*#{0}));"
           spec="@ssound.fadei"
           help="@ssound.fadei.help"
           type="action"
           returns="void"
           category="sound"
           helpURL="sound-main"
           deprecated="true">
        <fields>
            <number order="0" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
        </context>
    </block>

    <block tag="collision-top"
           code="#{0}event.#{1}FromTop"
           spec="@collision.top"
           help="@collision.top.help"
           type="normal"
           returns="boolean"
           category="collision"
           helpURL="collision-main">
        <fields>
            <dropdown order="0" id="collisionHit" />
            <dropdown order="1" id="collisionActors" />
        </fields>
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-left"
           code="#{0}event.#{1}FromLeft"
           spec="@collision.left"
           help="@collision.left.help"
           type="normal"
           returns="boolean"
           category="collision"
           helpURL="collision-main">
        <fields>
            <dropdown order="0" id="collisionHit" />
            <dropdown order="1" id="collisionActors" />
        </fields>
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-bottom"
           code="#{0}event.#{1}FromBottom"
           spec="@collision.bottom"
           help="@collision.bottom.help"
           type="normal"
           returns="boolean"
           category="collision"
           helpURL="collision-main">
        <fields>
            <dropdown order="0" id="collisionHit" />
            <dropdown order="1" id="collisionActors" />
        </fields>
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-right"
           code="#{0}event.#{1}FromRight"
           spec="@collision.right"
           help="@collision.right.help"
           type="normal"
           returns="boolean"
           category="collision"
           helpURL="collision-main">
        <fields>
            <dropdown order="0" id="collisionHit" />
            <dropdown order="1" id="collisionActors" />
        </fields>
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-shape-group2"
           code="internalGetGroup(event.#{0}Actor, event.#{0}Shape, event)"
           spec="@collision.shape.group2"
           help="@collision.shape.group2.help"
           type="normal"
           returns="actorgroup"
           category="collision"
           helpURL="collision-main">
        <fields>
            <dropdown order="0" id="collisionActors" />
        </fields>
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-type2"
           code="#{0}event.#{1}CollidedWith#{2}"
           spec="@collision.type2"
           help="@collision.type2.help"
           type="normal"
           returns="boolean"
           category="collision"
           helpURL="collision-main">
        <fields>
            <dropdown order="0" id="collisionHitActive" />
            <dropdown order="1" id="collisionActors" />
            <dropdown order="2" id="collisionType" />
        </fields>
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-foreach"
           code="for(point in event.points)&#10;{&#10;#{0}&#10;}"
           spec="@collision.foreach"
           help="@collision.foreach.help"
           type="wrapper"
           returns="void"
           category="flow"
           helpURL="collision-points"
           isLoop="true">
        <fields>
            <code-block order="0" />
        </fields>
        <context>
            <innerContext type="has" value="point:com.stencyl.models.actor.CollisionPoint" />
            <innerContext type="keyword" value="break" />
            <innerContext type="keyword" value="continue" />
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-xynxy"
           code="Math.round(Engine.toPixelUnits(point.#{0}))"
           spec="@collision.xynxy"
           help="@collision.xynxy.help"
           type="normal"
           returns="int"
           category="collision"
           helpURL="collision-points">
        <fields>
            <dropdown order="0" id="collisionPoints" />
        </fields>
        <context>
            <requiredContext type="has" value="point:com.stencyl.models.actor.CollisionPoint" />
        </context>
    </block>

    <block tag="tile-data-for-collision"
           code="getTileDataForCollision(event, point)"
           spec="@collision.tiledata"
           help="@collision.tiledata.help"
           type="normal"
           returns="text"
           category="collision"
           helpURL="collision-points">
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
            <requiredContext type="has" value="point:com.stencyl.models.actor.CollisionPoint" />
        </context>
    </block>

    <block tag="tile-position-for-collision"
           code="getTilePositionForCollision(#{0}, event, point)"
           spec="@collision.tileposition"
           help="@collision.tileposition.help"
           type="normal"
           returns="int"
           category="collision"
           helpURL="collision-points">
        <fields>
            <dropdown order="0" id="columnRow" />
        </fields>
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
            <requiredContext type="has" value="point:com.stencyl.models.actor.CollisionPoint" />
        </context>
    </block>

    <block tag="collision-type"
           code="#{0}event.thisCollidedWith#{1}"
           spec="@collision.type"
           help="@collision.type.help"
           type="normal"
           returns="boolean"
           category="collision"
           helpURL="collision-main"
           deprecated="true">
        <fields>
            <dropdown order="0" id="collisionHitActive" />
            <dropdown order="1" id="collisionType" />
        </fields>
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-actor"
           code="#{0}event.collidedWithActor"
           spec="@collision.actor"
           help="@collision.actor.help"
           type="normal"
           returns="boolean"
           category="collision"
           helpURL="collision-main"
           deprecated="true">
        <fields>
            <dropdown order="0" id="collisionHitActive" />
        </fields>
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-terrain"
           code="#{0}event.collidedWithTerrain"
           spec="@collision.terrain"
           help="@collision.terrain.help"
           type="normal"
           returns="boolean"
           category="collision"
           helpURL="collision-main"
           deprecated="true">
        <fields>
            <dropdown order="0" id="collisionHitActive" />
        </fields>
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-tile"
           code="#{0}event.collidedWithTile"
           spec="@collision.tile"
           help="@collision.tile.help"
           type="normal"
           returns="boolean"
           category="collision"
           helpURL="collision-main"
           deprecated="true">
        <fields>
            <dropdown order="0" id="collisionHitActive" />
        </fields>
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-sensor"
           code="#{0}event.collidedWithSensor"
           spec="@collision.sensor"
           help="@collision.sensor.help"
           type="normal"
           returns="boolean"
           category="collision"
           helpURL="collision-main"
           deprecated="true">
        <fields>
            <dropdown order="0" id="collisionHitActive" />
        </fields>
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-shape-group-me"
           code="internalGetGroup(event.thisActor, event.thisShape, event)"
           spec="@collision.shape.group.me"
           help="@collision.shape.group.me.help"
           type="normal"
           returns="actorgroup"
           category="collision"
           helpURL="collision-main"
           deprecated="true">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-shape-group"
           code="internalGetGroup(event.otherActor, event.otherShape, event)"
           spec="@collision.shape.group"
           help="@collision.shape.group.help"
           type="normal"
           returns="actorgroup"
           category="collision"
           helpURL="collision-main"
           deprecated="true">
        <context>
            <requiredContext type="staticimport" value="com.stencyl.behavior.Script" />
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-actor1"
           code="event.actorA"
           spec="@collision.actor1"
           help="@collision.actor1.help"
           type="normal"
           returns="actor"
           category="collision"
           helpURL="collision-main"
           deprecated="true">
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-actor2"
           code="event.actorB"
           spec="@collision.actor2"
           help="@collision.actor2.help"
           type="normal"
           returns="actor"
           category="collision"
           helpURL="collision-main"
           deprecated="true">
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-isthisAB"
           code="(event.actor#{0} == actor)"
           spec="@collision.isthisAB"
           help="@collision.isthisAB.help"
           type="normal"
           returns="boolean"
           category="collision"
           helpURL="collision-main"
           deprecated="true">
        <fields>
            <dropdown order="0" id="firstSecondAB" />
        </fields>
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-isthis1"
           code="(event.actorA == actor)"
           spec="@collision.isthis1"
           help="@collision.isthis1.help"
           type="normal"
           returns="boolean"
           category="collision"
           helpURL="collision-main"
           deprecated="true">
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-isthis2"
           code="(event.actorB == actor)"
           spec="@collision.isthis2"
           help="@collision.isthis2.help"
           type="normal"
           returns="boolean"
           category="collision"
           helpURL="collision-main"
           deprecated="true">
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-actorAB"
           code="event.actor#{0}"
           spec="@collision.actorAB"
           help="@collision.actorAB.help"
           type="normal"
           returns="actor"
           category="collision"
           helpURL="collision-main"
           deprecated="true">
        <fields>
            <dropdown order="0" id="firstSecondAB" />
        </fields>
        <context>
            <requiredContext type="has" value="event:com.stencyl.models.actor.Collision" />
        </context>
    </block>

    <block tag="collision-x"
           code="Math.round(Engine.toPixelUnits(point.point.x))"
           spec="@collision.x"
           help="@collision.x.help"
           type="normal"
           returns="int"
           category="collision"
           helpURL="collision-points"
           deprecated="true">
        <context>
            <requiredContext type="has" value="point:com.stencyl.models.actor.CollisionPoint" />
        </context>
    </block>

    <block tag="collision-y"
           code="Math.round(Engine.toPixelUnits(point.point.y))"
           spec="@collision.y"
           help="@collision.y.help"
           type="normal"
           returns="int"
           category="collision"
           helpURL="collision-points"
           deprecated="true">
        <context>
            <requiredContext type="has" value="point:com.stencyl.models.actor.CollisionPoint" />
        </context>
    </block>

    <block tag="collision-nx"
           code="point.normal.x"
           spec="@collision.nx"
           help="@collision.nx.help"
           type="normal"
           returns="number"
           category="collision"
           helpURL="collision-points"
           deprecated="true">
        <context>
            <requiredContext type="has" value="point:com.stencyl.models.actor.CollisionPoint" />
        </context>
    </block>

    <block tag="collision-ny"
           code="point.normal.y"
           spec="@collision.ny"
           help="@collision.ny.help"
           type="normal"
           returns="number"
           category="collision"
           helpURL="collision-points"
           deprecated="true">
        <context>
            <requiredContext type="has" value="point:com.stencyl.models.actor.CollisionPoint" />
        </context>
    </block>

    <block tag="return"
           code="return #{0};"
           spec="@event.return"
           help="@event.return.help"
           type="action"
           returns="void"
           category="flow"
           helpURL="custom-main"
           isBottom="true">
        <fields>
            <anything order="0" />
        </fields>
        <context>
            <requiredContext type="keyword" value="return" />
        </context>
    </block>

</blocks>
